import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  FaRocket,
  FaUniversity,
  FaIndustry,
  FaLaptopCode,
  FaGlobe,
  FaServer,
  FaMobileAlt,
  FaQuestionCircle,
  FaSync,
} from "react-icons/fa";


const CONTENT = {
  en: {
    heading: "Types of Computers",
    intro:
      "Computers come in many different shapes and sizes. Some are huge like a room ЁЯЪА, while others fit right into your pocket ЁЯУ▒. LetтАЩs explore the different types of computers!",
    sections: {
      size: {
        title: "Types According to Size",
        subtitle: "Biggest тЖТ Smallest (let's compare!)",
        items: [
          {
            id: "super",
            title: "Supercomputers",
            short: "The fastest and largest computers in the world!",
            detail:
              "Used for huge tasks like predicting weather, space research, and discovering medicines. Imagine a giant brain that solves the hardest puzzles!",
            hook: "They can do millions of calculations in a single second!",
            icon: <FaRocket className="text-red-500 w-12 h-12" />,
            img: "https://cdn-icons-png.flaticon.com/512/4727/4727486.png",
          },
          {
            id: "mainframe",
            title: "Mainframe Computers",
            short: "Very large computers used by banks and big companies.",
            detail:
              "They store and process information for thousands of people at once тАФ like a giant library of data that opens many books at the same time.",
            hook: "They help banks, railways and big companies manage tons of information!",
            icon: <FaUniversity className="text-purple-600 w-12 h-12" />,
            img: "https://cdn-icons-png.flaticon.com/512/1048/1048953.png",
          },
          {
            id: "mini",
            title: "Minicomputers",
            short: "Smaller than mainframes but still powerful.",
            detail:
              "Used in offices, factories, and schools to help many people work together. Think of it as a teacher's helper computer in a big school.",
            hook: "Good for medium-sized tasks and many users.",
            icon: <FaIndustry className="text-green-600 w-12 h-12" />,
            img: "https://cdn-icons-png.flaticon.com/512/1157/1157109.png",
          },
          {
            id: "micro",
            title: "Microcomputers (Personal Computers)",
            short: "The computers we use every day тАФ laptops, tablets, desktops.",
            detail:
              "Perfect for learning, playing, drawing and exploring the internet. If you have a laptop or tablet, you already have a microcomputer!",
            hook: "Your home computer is a microcomputer!",
            icon: <FaLaptopCode className="text-sky-500 w-12 h-12" />,
            img: "https://cdn-icons-png.flaticon.com/512/2933/2933245.png",
          },
        ],
      },
      use: {
        title: "Types According to Use",
        items: [
          {
            id: "general",
            title: "General Purpose Computers",
            detail:
              "These can do many tasks тАФ typing, drawing, playing games, or surfing the web. Examples: PC, Laptop.",
            icon: <FaGlobe className="text-indigo-500 w-10 h-10" />,
            analogy: "Like a swiss-army knife тАФ useful for many things.",
          },
          {
            id: "special",
            title: "Special Purpose Computers",
            detail:
              "Made to do one job very well тАФ for example, ATMs (for money), washing machines (to wash clothes), or traffic lights (to control road signals).",
            icon: <FaServer className="text-yellow-600 w-10 h-10" />,
            analogy: "Like a toaster тАФ it only makes toast, but it does it great!",
          },
        ],
      },
      functionality: {
        title: "Types According to Functionality",
        items: [
          {
            id: "analog",
            title: "Analog Computers",
            detail:
              "Used for measuring real things such as speed, temperature and voltage. They work with continuous data. (Old but cool!)",
            icon: <FaGlobe className="text-emerald-600 w-10 h-10" />,
            example: "Example: old speed-measuring instruments.",
          },
          {
            id: "digital",
            title: "Digital Computers",
            detail:
              "The ones we use today тАФ they work with numbers, images and words. Most modern computers are digital.",
            icon: <FaMobileAlt className="text-sky-600 w-10 h-10" />,
            example: "Example: smartphones, laptops.",
          },
          {
            id: "hybrid",
            title: "Hybrid Computers",
            detail:
              "A mix of analog and digital. Used in scientific labs and hospitals where both types of data are needed.",
            icon: <FaServer className="text-pink-600 w-10 h-10" />,
            example: "Example: hospital monitoring systems.",
          },
        ],
      },
    },
    serversNote:
      "Where do server computers occur? Servers can be small (like minicomputers) or very large (like mainframes). By use, they are special-purpose machines that share data with many users тАФ web servers, mail servers, database servers and game servers.",
    funFact:
      "Did you know? The first computers were so big they could fill a whole room! Today, we can carry powerful computers in our pockets as smartphones. ЁЯУ▒",
    engagement: "Which type of computer do you use every day?",
    quiz: {
      q: "Which computer is used by banks to store information for thousands of people?",
      options: ["Microcomputer", "Mainframe", "Smartphone", "Tablet"],
      answer: 1,
    },
  },

  hi: {
    heading: "рдХрдВрдкреНрдпреВрдЯрд░ рдХреЗ рдкреНрд░рдХрд╛рд░",
    intro:
      "рдХрдВрдкреНрдпреВрдЯрд░ рдХрдИ рдЖрдХрд╛рд░ рдФрд░ рдкреНрд░рдХрд╛рд░ рдХреЗ рд╣реЛрддреЗ рд╣реИрдВред рдХреБрдЫ рдХрдорд░реЗ рдЬрд┐рддрдиреЗ рдмрдбрд╝реЗ рд╣реЛрддреЗ рд╣реИрдВ ЁЯЪА, рдЬрдмрдХрд┐ рдХреБрдЫ рдЖрдкрдХреА рдЬреЗрдм рдореЗрдВ рдлрд┐рдЯ рд╣реЛ рдЬрд╛рддреЗ рд╣реИрдВ ЁЯУ▒ред рдЖрдЗрдП рдХрдВрдкреНрдпреВрдЯрд░ рдХреЗ рдкреНрд░рдХрд╛рд░ рдЬрд╛рдиреЗрдВ!",
    sections: {
      size: {
        title: "рдЖрдХрд╛рд░ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдкреНрд░рдХрд╛рд░",
        subtitle: "рд╕рдмрд╕реЗ рдмрдбрд╝реЗ тЖТ рд╕рдмрд╕реЗ рдЫреЛрдЯреЗ (рдмрдбрд╝реЗ рдФрд░ рдЫреЛрдЯреЗ рдорд┐рд▓рд╛рдХрд░ рджреЗрдЦреЗрдВ!)",
        items: [
          {
            id: "super",
            title: "рд╕реБрдкрд░рдХрдВрдкреНрдпреВрдЯрд░",
            short: "рджреБрдирд┐рдпрд╛ рдХреЗ рд╕рдмрд╕реЗ рддреЗрдЬрд╝ рдФрд░ рд╕рдмрд╕реЗ рдмрдбрд╝реЗ рдХрдВрдкреНрдпреВрдЯрд░!",
            detail:
              "рдмрдбрд╝рд╛ рдХрд╛рдо рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧ рд╣реЛрддреЗ рд╣реИрдВ тАФ рдЬреИрд╕реЗ рдореМрд╕рдо рдХрд╛ рдЕрдиреБрдорд╛рди, рдЕрдВрддрд░рд┐рдХреНрд╖ рдЕрдиреБрд╕рдВрдзрд╛рди рдФрд░ рджрд╡рд╛рдЗрдпрд╛рдБ рдЦреЛрдЬрдиреЗ рдореЗрдВ рдорджрджред рдХрд▓реНрдкрдирд╛ рдХреАрдЬрд┐рдП рдПрдХ рдмрд╣реБрдд рдмрдбрд╝рд╛ рджрд┐рдорд╛рдЧ рдЬреЛ рдХрдард┐рди рд╕реЗ рдХрдард┐рди рдкреНрд░рд╢реНрди рд╣рд▓ рдХрд░реЗ!",
            hook: "рдпреЗ рдПрдХ рд╕реЗрдХрдВрдб рдореЗрдВ рд▓рд╛рдЦреЛрдВ рд╣рд┐рд╕рд╛рдм рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ!",
            icon: <FaRocket className="text-red-500 w-12 h-12" />,
            img: "https://cdn-icons-png.flaticon.com/512/4727/4727486.png",
          },
          {
            id: "mainframe",
            title: "рдореЗрдирдлреНрд░реЗрдо рдХрдВрдкреНрдпреВрдЯрд░",
            short: "рдмреИрдВрдХ рдФрд░ рдмрдбрд╝реА рдХрдВрдкрдирд┐рдпреЛрдВ рджреНрд╡рд╛рд░рд╛ рдЙрдкрдпреЛрдЧ рдХрд┐рдП рдЬрд╛рдиреЗ рд╡рд╛рд▓реЗ рдмрд╣реБрдд рдмрдбрд╝реЗ рдХрдВрдкреНрдпреВрдЯрд░ред",
            detail:
              "рдпреЗ рд╣рдЬрд╛рд░реЛрдВ рд▓реЛрдЧреЛрдВ рдХреА рдЬрд╛рдирдХрд╛рд░реА рдПрдХ рд╕рд╛рде рд╕рдВрднрд╛рд▓рддреЗ рд╣реИрдВ тАФ рдЬреИрд╕реЗ рдПрдХ рд╡рд┐рд╢рд╛рд▓ рдкреБрд╕реНрддрдХрд╛рд▓рдп рдЬреЛ рдХрдИ рдХрд┐рддрд╛рдмреЗрдВ рдПрдХ рд╕рд╛рде рдЦреЛрд▓рддрд╛ рд╣реИред",
            hook: "рдпреЗ рдмреИрдВрдХ, рд░реЗрд▓рд╡реЗ рдФрд░ рдмрдбрд╝реА рдХрдВрдкрдирд┐рдпреЛрдВ рдХреА рдорджрдж рдХрд░рддреЗ рд╣реИрдВ!",
            icon: <FaUniversity className="text-purple-600 w-12 h-12" />,
            img: "https://cdn-icons-png.flaticon.com/512/1048/1048953.png",
          },
          {
            id: "mini",
            title: "рдорд┐рдиреА рдХрдВрдкреНрдпреВрдЯрд░",
            short: "рдореЗрдирдлреНрд░реЗрдо рд╕реЗ рдЫреЛрдЯреЗ рдкрд░ рдлрд┐рд░ рднреА рд╢рдХреНрддрд┐рд╢рд╛рд▓реАред",
            detail:
              "рдХрд╛рд░реНрдпрд╛рд▓рдпреЛрдВ, рдлреИрдХреНрдЯреНрд░рд┐рдпреЛрдВ рдФрд░ рд╕реНрдХреВрд▓реЛрдВ рдореЗрдВ рдЙрдкрдпреЛрдЧ рд╣реЛрддреЗ рд╣реИрдВред рдЗрд╕реЗ рдПрдХ рдмрдбрд╝реЗ рд╕реНрдХреВрд▓ рдореЗрдВ рд╢рд┐рдХреНрд╖рдХ рдХреЗ рд╕рд╣рд╛рдпрдХ рдХреА рддрд░рд╣ рд╕рдордЭреЗрдВред",
            hook: "рдордзреНрдпрдо рдЖрдХрд╛рд░ рдХреЗ рдХрд╛рд░реНрдпреЛрдВ рдФрд░ рдХрдИ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЗ рд▓рд┐рдП рдЕрдЪреНрдЫреЗред",
            icon: <FaIndustry className="text-green-600 w-12 h-12" />,
            img: "https://cdn-icons-png.flaticon.com/512/1157/1157109.png",
          },
          {
            id: "micro",
            title: "рдорд╛рдЗрдХреНрд░реЛ рдХрдВрдкреНрдпреВрдЯрд░ (рдкрд░реНрд╕рдирд▓ рдХрдВрдкреНрдпреВрдЯрд░)",
            short: "рд╡реЛ рдХрдВрдкреНрдпреВрдЯрд░ рдЬреЛ рд╣рдо рд░реЛрдЬрд╝ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░рддреЗ рд╣реИрдВ тАФ рд▓реИрдкрдЯреЙрдк, рдЯреИрдмрд▓реЗрдЯ, рдбреЗрд╕реНрдХрдЯреЙрдкред",
            detail:
              "рд╕реАрдЦрдиреЗ, рдЦреЗрд▓ рдЦреЗрд▓рдиреЗ, рдЪрд┐рддреНрд░ рдмрдирд╛рдиреЗ рдФрд░ рдЗрдВрдЯрд░рдиреЗрдЯ рдЦреЛрдЬрдиреЗ рдХреЗ рд▓рд┐рдП рдЙрддреНрддрдоред рдЕрдЧрд░ рдЖрдкрдХреЗ рдкрд╛рд╕ рд▓реИрдкрдЯреЙрдк рд╣реИ, рддреЛ рдЖрдкрдХреЗ рдкрд╛рд╕ рдорд╛рдЗрдХреНрд░реЛ рдХрдВрдкреНрдпреВрдЯрд░ рд╣реИ!",
            hook: "рдЖрдкрдХрд╛ рдШрд░ рдХрд╛ рдХрдВрдкреНрдпреВрдЯрд░ рдПрдХ рдорд╛рдЗрдХреНрд░реЛ рдХрдВрдкреНрдпреВрдЯрд░ рд╣реИ!",
            icon: <FaLaptopCode className="text-sky-500 w-12 h-12" />,
            img: "https://cdn-icons-png.flaticon.com/512/2933/2933245.png",
          },
        ],
      },
      use: {
        title: "рдЙрдкрдпреЛрдЧ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдкреНрд░рдХрд╛рд░",
        items: [
          {
            id: "general",
            title: "рдЬрдирд░рд▓ рдкрд░реНрдкрдЬрд╝ рдХрдВрдкреНрдпреВрдЯрд░",
            detail:
              "рдпреЗ рдХрдИ рдХрд╛рдо рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ тАФ рд▓рд┐рдЦрдирд╛, рдЪрд┐рддреНрд░ рдмрдирд╛рдирд╛, рдЦреЗрд▓рдирд╛ рдФрд░ рдЗрдВрдЯрд░рдиреЗрдЯ рдЪрд▓рд╛рдирд╛ред рдЙрджрд╛рд╣рд░рдг: PC, Laptopред",
            icon: <FaGlobe className="text-indigo-500 w-10 h-10" />,
            analogy: "рдПрдХ рд╕реНрд╡рд┐рд╕-рдЖрд░реНрдореА рдЪрд╛рдХреВ рдХреА рддрд░рд╣ тАФ рдХрдИ рдХрд╛рдореЛрдВ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧреАред",
          },
          {
            id: "special",
            title: "рд╡рд┐рд╢реЗрд╖ рдкреНрд░рдпреЛрдЬрди рдХрдВрдкреНрдпреВрдЯрд░",
            detail:
              "рдпреЗ рдХреЗрд╡рд▓ рдПрдХ рдХрд╛рдо рдХреЗ рд▓рд┐рдП рдмрдирд╛рдП рдЬрд╛рддреЗ рд╣реИрдВ тАФ рдЬреИрд╕реЗ ATM (рдкреИрд╕реЗ рдХреЗ рд▓рд┐рдП), рд╡реЙрд╢рд┐рдВрдЧ рдорд╢реАрди (рдХрдкрдбрд╝реЗ рдзреЛрдиреЗ рдХреЗ рд▓рд┐рдП)ред",
            icon: <FaServer className="text-yellow-600 w-10 h-10" />,
            analogy: "рдПрдХ рдЯреЛрд╕реНрдЯрд░ рдХреА рддрд░рд╣ тАФ рд╕рд┐рд░реНрдл рдЯреЛрд╕реНрдЯ рдмрдирд╛рддрд╛ рд╣реИ, рдкрд░ рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛ рдмрдирд╛рддрд╛ рд╣реИ!",
          },
        ],
      },
      functionality: {
        title: "рдХрд╛рд░реНрдпрдкреНрд░рдгрд╛рд▓реА рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдкреНрд░рдХрд╛рд░",
        items: [
          {
            id: "analog",
            title: "рдПрдирд╛рд▓реЙрдЧ рдХрдВрдкреНрдпреВрдЯрд░",
            detail:
              "рд╡рд╛рд╕реНрддрд╡рд┐рдХ рдЪреАрдЬрд╝реЛрдВ рдЬреИрд╕реЗ рдЧрддрд┐, рддрд╛рдкрдорд╛рди рдФрд░ рд╡реЛрд▓реНрдЯреЗрдЬ рдХреЛ рдорд╛рдкрди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧ рд╣реЛрддреЗ рд╣реИрдВред рдпреЗ рд▓рдЧрд╛рддрд╛рд░ рдмрджрд▓рдиреЗ рд╡рд╛рд▓реЗ рдбреЗрдЯрд╛ рдХреЗ рд╕рд╛рде рдХрд╛рдо рдХрд░рддреЗ рд╣реИрдВред",
            icon: <FaGlobe className="text-emerald-600 w-10 h-10" />,
            example: "рдЙрджрд╛рд╣рд░рдг: рдкреБрд░рд╛рдиреЗ рд╕реНрдкреАрдб рдорд╛рдкрдиреЗ рд╡рд╛рд▓реЗ рдпрдВрддреНрд░ред",
          },
          {
            id: "digital",
            title: "рдбрд┐рдЬрд┐рдЯрд▓ рдХрдВрдкреНрдпреВрдЯрд░",
            detail:
              "рдЖрдЬ рд╣рдо рдЬреЛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░рддреЗ рд╣реИрдВ тАФ рдпреЗ рдирдВрдмрд░, рдЫрд╡рд┐рдпрд╛рдБ рдФрд░ рд╢рдмреНрджреЛрдВ рдХреЗ рд╕рд╛рде рдХрд╛рдо рдХрд░рддреЗ рд╣реИрдВред рдЕрдзрд┐рдХрд╛рдВрд╢ рдЖрдзреБрдирд┐рдХ рдХрдВрдкреНрдпреВрдЯрд░ рдбрд┐рдЬрд┐рдЯрд▓ рд╣реЛрддреЗ рд╣реИрдВред",
            icon: <FaMobileAlt className="text-sky-600 w-10 h-10" />,
            example: "рдЙрджрд╛рд╣рд░рдг: рд╕реНрдорд╛рд░реНрдЯрдлреЛрди, рд▓реИрдкрдЯреЙрдкред",
          },
          {
            id: "hybrid",
            title: "рд╣рд╛рдЗрдмреНрд░рд┐рдб рдХрдВрдкреНрдпреВрдЯрд░",
            detail:
              "рдПрдирд╛рд▓реЙрдЧ рдФрд░ рдбрд┐рдЬрд┐рдЯрд▓ рдХрд╛ рдорд┐рд╢реНрд░рдгред рдпреЗ рд╡реИрдЬреНрдЮрд╛рдирд┐рдХ рд▓реИрдм рдФрд░ рдЕрд╕реНрдкрддрд╛рд▓реЛрдВ рдореЗрдВ рдЙрдкрдпреЛрдЧ рд╣реЛрддреЗ рд╣реИрдВред",
            icon: <FaServer className="text-pink-600 w-10 h-10" />,
            example: "рдЙрджрд╛рд╣рд░рдг: рдЕрд╕реНрдкрддрд╛рд▓ рдореЙрдирд┐рдЯрд░рд┐рдВрдЧ рд╕рд┐рд╕реНрдЯрдоред",
          },
        ],
      },
    },
    serversNote:
      "рд╕рд░реНрд╡рд░ рдХрдВрдкреНрдпреВрдЯрд░ рдХрд╣рд╛рдБ рдЖрддреЗ рд╣реИрдВ? рд╕рд░реНрд╡рд░ рдЫреЛрдЯреЗ (рдорд┐рдиреА) рднреА рд╣реЛ рд╕рдХрддреЗ рд╣реИрдВ рдФрд░ рдмрд╣реБрдд рдмрдбрд╝реЗ (рдореЗрдирдлреНрд░реЗрдо) рднреАред рдЙрдкрдпреЛрдЧ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдпреЗ рд╡рд┐рд╢реЗрд╖-рдЙрджреНрджреЗрд╢реНрдп рдорд╢реАрдиреЗрдВ рд╣реИрдВ рдЬреЛ рдХрдИ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЛ рдбреЗрдЯрд╛ рд╢реЗрдпрд░ рдХрд░рддреА рд╣реИрдВ тАФ рд╡реЗрдм рд╕рд░реНрд╡рд░, рдореЗрд▓ рд╕рд░реНрд╡рд░, рдбреЗрдЯрд╛рдмреЗрд╕ рд╕рд░реНрд╡рд░ рдФрд░ рдЧреЗрдо рд╕рд░реНрд╡рд░ред",
    funFact:
      "рдХреНрдпрд╛ рдЖрдк рдЬрд╛рдирддреЗ рд╣реИрдВ? рдкрд╣рд▓реЗ рдХреЗ рдХрдВрдкреНрдпреВрдЯрд░ рдЗрддрдиреЗ рдмрдбрд╝реЗ рд╣реЛрддреЗ рдереЗ рдХрд┐ рд╡реЗ рдкреВрд░реЗ рдХрдорд░реЗ рдореЗрдВ рднрд░ рдЬрд╛рддреЗ рдереЗ! рдЖрдЬ рд╣рдо рдкреЙрдХреЗрдЯ рдореЗрдВ рд╕реНрдорд╛рд░реНрдЯрдлреЛрди рдЬреИрд╕рд╛ рд╢рдХреНрддрд┐рд╢рд╛рд▓реА рдХрдВрдкреНрдпреВрдЯрд░ рд▓реЗ рдЬрд╛ рд╕рдХрддреЗ рд╣реИрдВ. ЁЯУ▒",
    engagement: "рдЖрдк рд░реЛрдЬрд╝ рдХреМрди рд╕рд╛ рдХрдВрдкреНрдпреВрдЯрд░ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░рддреЗ рд╣реИрдВ?",
    quiz: {
      q: "рдХреМрди рд╕рд╛ рдХрдВрдкреНрдпреВрдЯрд░ рдмреИрдВрдХреЛрдВ рджреНрд╡рд╛рд░рд╛ рд╣рдЬрд╛рд░реЛрдВ рд▓реЛрдЧреЛрдВ рдХреА рдЬрд╛рдирдХрд╛рд░реА рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧ рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ?",
      options: ["рдорд╛рдЗрдХреНрд░реЛ рдХрдВрдкреНрдпреВрдЯрд░", "рдореЗрдирдлреНрд░реЗрдо", "рд╕реНрдорд╛рд░реНрдЯрдлреЛрди", "рдЯреИрдмрд▓реЗрдЯ"],
      answer: 1,
    },
  },
};

const cardVariant = {
  hidden: { opacity: 0, y: 20, scale: 0.98 },
  visible: (i = 1) => ({
    opacity: 1,
    y: 0,
    scale: 1,
    transition: { delay: i * 0.12, type: "spring", stiffness: 80 },
  }),
};

export default function TypesOfComputers() {
  const [lang, setLang] = useState("en");
  const data = CONTENT[lang];
  const [selected, setSelected] = useState(null);
  const [quizOpen, setQuizOpen] = useState(false);
  const [quizAnswer, setQuizAnswer] = useState(null);

  const toggleLang = () => setLang((l) => (l === "en" ? "hi" : "en"));

  return (
    <div className="max-w-5xl mx-auto p-6">
      {/* Header */}
      <div className="flex items-center justify-between gap-4">
        <motion.h1
          className="text-4xl md:text-5xl font-extrabold bg-clip-text text-transparent bg-gradient-to-r from-indigo-600 via-pink-500 to-yellow-400"
          initial={{ scale: 0.9, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.6 }}
        >
          {data.heading}
        </motion.h1>

        <div className="flex items-center gap-2">
          <button
            onClick={toggleLang}
            className="px-3 py-2 rounded-lg border bg-white/70 backdrop-blur text-sm font-medium shadow-sm hover:scale-105 transition-transform"
            aria-label="Toggle language"
          >
            {lang === "en" ? "рд╣рд┐рдВрджреА" : "EN"}
          </button>
          <button
            onClick={() => {
              setSelected(null);
              setQuizAnswer(null);
            }}
            className="p-2 rounded-lg bg-white/60 hover:bg-white shadow"
            title="Reset"
          >
            <FaSync />
          </button>
        </div>
      </div>

      {/* Intro */}
      <motion.div
        className="mt-6 p-6 bg-gradient-to-br from-white to-indigo-50 rounded-2xl shadow-lg flex gap-6 items-center"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
      >
        <motion.img
          src="https://cdn-icons-png.flaticon.com/512/1524/1524986.png"
          alt="animated laptop"
          className="w-28 h-28"
          initial={{ rotate: -6 }}
          animate={{ rotate: [ -6, 6, -6 ] }}
          transition={{ repeat: Infinity, duration: 3 }}
        />
        <div>
          <p className="text-lg text-gray-700">{data.intro}</p>
          <div className="mt-3 flex gap-3">
            <button
              onClick={() => setQuizOpen(true)}
              className="inline-flex items-center gap-2 px-3 py-2 rounded-lg bg-indigo-600 text-white font-semibold shadow hover:scale-105 transition-transform"
            >
              <FaQuestionCircle /> {lang === "en" ? "Quick Quiz" : "рддреНрд░реЛрдЯрдХ рдкреНрд░рд╢реНрди"}
            </button>
            <button
              onClick={() => window.scrollTo({ top: 800, behavior: "smooth" })}
              className="inline-flex items-center gap-2 px-3 py-2 rounded-lg bg-white border font-medium shadow hover:scale-105 transition-transform"
            >
              ЁЯУЪ {lang === "en" ? "Explore" : "рдЦреЛрдЬреЗрдВ"}
            </button>
          </div>
        </div>
      </motion.div>

      {/* Sections */}
      <div className="mt-8 grid gap-8 md:grid-cols-2">
        {/* Left: Size */}
        <div>
          <motion.h2
            className="text-2xl font-bold mb-3"
            initial={{ x: -20, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
          >
            {data.sections.size.title}
          </motion.h2>
          <p className="text-sm text-gray-600 mb-4">{data.sections.size.subtitle}</p>

          <div className="space-y-4">
            {data.sections.size.items.map((it, i) => (
              <motion.article
                key={it.id}
                className="p-4 rounded-2xl bg-white shadow hover:shadow-2xl cursor-pointer flex gap-4 items-center"
                variants={cardVariant}
                custom={i}
                initial="hidden"
                animate="visible"
                onClick={() => setSelected(it.id)}
                whileHover={{ scale: 1.02 }}
                role="button"
                aria-pressed={selected === it.id}
              >
                <div className="flex-shrink-0">
                  <div className="w-20 h-20 rounded-xl bg-gradient-to-tr from-white to-indigo-50 flex items-center justify-center shadow-inner">
                    {it.icon}
                  </div>
                </div>
                <div className="flex-1">
                  <div className="flex items-start justify-between">
                    <h3 className="text-lg font-semibold">{it.title}</h3>
                    <span className="text-sm text-gray-500">{it.hook}</span>
                  </div>
                  <p className="text-sm text-gray-600 mt-1">{it.short}</p>
                </div>
                <img src={it.img} alt={it.title} className="w-16 h-16 object-contain" />
              </motion.article>
            ))}
          </div>
        </div>

        {/* Right: Use & Functionality + Servers note */}
        <div className="space-y-6">
          <motion.div initial={{ x: 20, opacity: 0 }} animate={{ x: 0, opacity: 1 }}>
            <h2 className="text-2xl font-bold mb-3">{data.sections.use.title}</h2>
            <div className="grid gap-3">
              {data.sections.use.items.map((u) => (
                <motion.div
                  key={u.id}
                  className="p-3 rounded-xl bg-white shadow flex gap-3 items-center"
                  whileHover={{ scale: 1.02 }}
                >
                  <div className="w-12 h-12 flex items-center justify-center bg-indigo-50 rounded-lg">
                    {u.icon}
                  </div>
                  <div>
                    <h4 className="font-semibold">{u.title}</h4>
                    <p className="text-sm text-gray-600">{u.detail}</p>
                    <p className="mt-1 text-xs text-gray-500 italic">{u.analogy}</p>
                  </div>
                </motion.div>
              ))}
            </div>
          </motion.div>

          <motion.div initial={{ x: 20, opacity: 0 }} animate={{ x: 0, opacity: 1 }}>
            <h2 className="text-2xl font-bold mb-3">{data.sections.functionality.title}</h2>
            <div className="grid gap-3">
              {data.sections.functionality.items.map((f) => (
                <motion.div
                  key={f.id}
                  className="p-3 rounded-xl bg-white shadow flex gap-3 items-center"
                  whileHover={{ scale: 1.02 }}
                >
                  <div className="w-12 h-12 flex items-center justify-center bg-indigo-50 rounded-lg">
                    {f.icon}
                  </div>
                  <div>
                    <h4 className="font-semibold">{f.title}</h4>
                    <p className="text-sm text-gray-600">{f.detail}</p>
                    {f.example && <p className="mt-1 text-xs text-gray-500 italic">{f.example}</p>}
                  </div>
                </motion.div>
              ))}
            </div>
          </motion.div>

          <div className="p-4 rounded-xl bg-gradient-to-r from-yellow-50 to-white shadow">
            <h4 className="font-semibold">{lang === "en" ? "Server computers" : "рд╕рд░реНрд╡рд░ рдХрдВрдкреНрдпреВрдЯрд░"}</h4>
            <p className="text-sm text-gray-600 mt-2">{data.serversNote}</p>
          </div>
        </div>
      </div>

      {/* Selected detail panel */}
      <AnimatePresence>
        {selected && (
          <motion.div
            className="mt-8 p-6 rounded-2xl bg-gradient-to-br from-white to-indigo-50 shadow-lg"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 20 }}
          >
            {(() => {
              const section = data.sections.size.items.find((s) => s.id === selected);
              if (!section) return null;
              return (
                <div className="flex gap-6 items-start">
                  <img src={section.img} alt={section.title} className="w-40 h-40 object-contain" />
                  <div>
                    <h3 className="text-2xl font-bold">{section.title}</h3>
                    <p className="mt-2 text-gray-700">{section.detail}</p>
                    <p className="mt-2 text-sm text-indigo-600 font-semibold">{section.hook}</p>
                    <div className="mt-4 flex gap-3">
                      <button
                        onClick={() => setSelected(null)}
                        className="px-3 py-2 bg-white rounded-lg border shadow"
                      >
                        {lang === "en" ? "Close" : "рдмрдВрдж рдХрд░реЗрдВ"}
                      </button>
                      <button
                        onClick={() => setQuizOpen(true)}
                        className="px-3 py-2 bg-indigo-600 text-white rounded-lg shadow"
                      >
                        {lang === "en" ? "Take Quick Quiz" : "рддреНрд╡рд░рд┐рдд рдкреНрд░рд╢реНрди рд▓реЗрдВ"}
                      </button>
                    </div>
                  </div>
                </div>
              );
            })()}
          </motion.div>
        )}
      </AnimatePresence>

      {/* Fun & Engagement */}
      <motion.div className="mt-8 p-6 rounded-2xl bg-white shadow-lg" initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
        <h3 className="text-xl font-semibold">{lang === "en" ? "Fun Fact" : "рд░реЛрдЪрдХ рддрдереНрдп"}</h3>
        <p className="mt-2 text-gray-700">{data.funFact}</p>
        <div className="mt-4 flex items-center justify-between">
          <p className="text-sm text-gray-600 italic">{data.engagement}</p>
          <button
            onClick={() => alert(lang === "en" ? "Tell us: PC, Laptop, Tablet or Phone?" : "рдмрддрд╛рдЗрдпреЗ: PC, рд▓реИрдкрдЯреЙрдк, рдЯреИрдмрд▓реЗрдЯ рдпрд╛ рдлреЛрди?")}
            className="px-3 py-2 bg-indigo-600 text-white rounded-lg shadow"
          >
            {lang === "en" ? "Answer" : "рдЙрддреНрддрд░"}
          </button>
        </div>
      </motion.div>

      {/* Quiz Modal */}
      <AnimatePresence>
        {quizOpen && (
          <motion.div
            className="fixed inset-0 z-50 flex items-center justify-center bg-black/40"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            <motion.div className="w-full max-w-md p-6 bg-white rounded-2xl shadow-lg" initial={{ scale: 0.9 }} animate={{ scale: 1 }} exit={{ scale: 0.9 }}>
              <h4 className="text-lg font-semibold">{data.quiz.q}</h4>
              <div className="mt-4 space-y-3">
                {data.quiz.options.map((opt, idx) => (
                  <label key={idx} className={`flex items-center gap-3 p-3 rounded-lg border ${quizAnswer===idx ? 'border-indigo-500 bg-indigo-50' : 'bg-white'}`}>
                    <input type="radio" name="quiz" checked={quizAnswer===idx} onChange={() => setQuizAnswer(idx)} />
                    <span className="text-sm">{opt}</span>
                  </label>
                ))}
              </div>
              <div className="mt-4 flex justify-end gap-2">
                <button onClick={() => setQuizOpen(false)} className="px-3 py-2 rounded-lg border">{lang==='en'?'Close':'рдмрдВрдж'}</button>
                <button
                  onClick={() => {
                    if (quizAnswer === null) return alert(lang==='en'? 'Please select an option' : 'рдХреГрдкрдпрд╛ рдПрдХ рд╡рд┐рдХрд▓реНрдк рдЪреБрдиреЗрдВ');
                    if (quizAnswer === data.quiz.answer) alert(lang==='en'? 'Correct! ЁЯОЙ' : 'рд╕рд╣реА! ЁЯОЙ');
                    else alert(lang==='en'? 'Oops! Try again.' : 'рдЙрдлрд╝! рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред');
                    setQuizOpen(false);
                    setQuizAnswer(null);
                  }}
                  className="px-3 py-2 rounded-lg bg-indigo-600 text-white"
                >
                  {lang==='en'? 'Submit': 'рдЬрдорд╛ рдХрд░реЗрдВ'}
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Footer small note */}
      <div className="mt-6 text-xs text-gray-500">Tip: Click any card to read more. Toggle language to switch between English and рд╣рд┐рдиреНрджреА.</div>
    </div>
  );
}
