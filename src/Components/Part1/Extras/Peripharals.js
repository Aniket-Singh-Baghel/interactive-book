import { motion } from "framer-motion";
import { Server, Router, Home as HomeIcon, Cpu } from "lucide-react";
import { Link, useNavigate } from 'react-router-dom';
import { FaKeyboard, FaMouse, FaHeadphones, FaDesktop, FaBrain, FaHandPaper, FaHome, FaArrowLeft, FaArrowRight } from "react-icons/fa";
import React, { useState } from "react";

const content = {
    en: {
        home: "Home",
        title: "What are Peripherals? ЁЯЦея╕П",
        def_part1: "A ",
        def_part1_span: "peripheral",
        def_part2: " is any device connected to a computer that isnтАЩt part of its ",
        def_part2_span: "core components",
        def_part3: " (CPU, RAM, Motherboard).",
        def_desc: "Think of them as helpful тАЬsidekicksтАЭ that let us interact with the computer.",
        confusion_title: "Why is it Confusing?",
        confusion_text: "Students often think peripherals (like monitors & keyboards) are тАЬcoreтАЭ parts because they feel essential for everyday use.",
        core_components_title: "Core Components",
        core_components_desc: "CPU, RAM, Motherboard = the ",
        core_components_desc_span: "Brain & Organs",
        core_components_desc_cont: ". Without them, the computer canтАЩt function.",
        peripherals_title: "Peripherals",
        peripherals_desc: "Keyboard, Monitor, Mouse = the ",
        peripherals_desc_span: "Hands, Eyes & Ears",
        peripherals_desc_cont: ". They help us interact but arenтАЩt the тАЬbrain.тАЭ",
        examples_title: "What if the Monitor was a Core Part?",
        examples_subtitle: "Many students think a monitor must be a core part of the computer. But letтАЩs look at real-world examples where computers work perfectly fine <em>without one</em>.",
        server_title: "Servers",
        server_text: " run the internet ЁЯТ╗. They usually donтАЩt have monitors тАФ theyтАЩre managed remotely through networks. This is called a ",
        server_text_span: "headless system",
        router_title: "Wi-Fi router",
        router_text: " is a tiny computer тЪЩя╕П. It has a CPU, RAM, and storage тАФ but no monitor!",
        smarthome_title: "Smart home hubs",
        smarthome_text: " like Alexa or Google Home process commands and play audio ЁЯО╢ тАФ all without screens.",
        embedded_title: "Embedded systems",
        embedded_text: " power things like cars, microwaves, and washing machines ЁЯЪЧ тАФ they compute but donтАЩt тАЬshowтАЭ you their work.",
        takeaway: "ЁЯСЙ The takeaway: Just like a person carries a bat and ball while playing, but doesnтАЩt need them while reading a book, in the same way a computer uses peripheral devices only when they are needed.",
        takeaway_span: "Core components",
        takeaway_cont: " (CPU, RAM, Motherboard) do the real computing. A monitor is just one way to <em>see</em> the results, not a part of the core brain itself.",
        previous: "Previous",
        next: "Next",
    },
    hi: {
        home: "рд╣реЛрдо",
        title: "рдкреЗрд░рд┐рдлреЗрд░рд▓реНрд╕ рдХреНрдпрд╛ рд╣реИрдВ? ЁЯЦея╕П",
        def_part1: "рдПрдХ ",
        def_part1_span: "рдкреЗрд░рд┐рдлреЗрд░рд▓",
        def_part2: " рдХрдВрдкреНрдпреВрдЯрд░ рд╕реЗ рдЬреБрдбрд╝рд╛ рдХреЛрдИ рднреА рдЙрдкрдХрд░рдг рд╣реИ рдЬреЛ рдЙрд╕рдХреЗ ",
        def_part2_span: "рдореБрдЦреНрдп рдШрдЯрдХреЛрдВ",
        def_part3: " (рд╕реАрдкреАрдпреВ, рд░реИрдо, рдорджрд░рдмреЛрд░реНрдб) рдХрд╛ рд╣рд┐рд╕реНрд╕рд╛ рдирд╣реАрдВ рд╣реИред",
        def_desc: "рдЙрдиреНрд╣реЗрдВ рд╕рд╣рд╛рдпрдХ \"рд╕рд╛рдЗрдбрдХрд┐рдХреНрд╕\" рдХреЗ рд░реВрдк рдореЗрдВ рд╕реЛрдЪреЗрдВ рдЬреЛ рд╣рдореЗрдВ рдХрдВрдкреНрдпреВрдЯрд░ рдХреЗ рд╕рд╛рде рдмрд╛рддрдЪреАрдд рдХрд░рдиреЗ рджреЗрддреЗ рд╣реИрдВред",
        confusion_title: "рдпрд╣ рднреНрд░рд╛рдордХ рдХреНрдпреЛрдВ рд╣реИ?",
        confusion_text: "рдЫрд╛рддреНрд░ рдЕрдХреНрд╕рд░ рд╕реЛрдЪрддреЗ рд╣реИрдВ рдХрд┐ рдкреЗрд░рд┐рдлреЗрд░рд▓реНрд╕ (рдЬреИрд╕реЗ рдореЙрдирд┐рдЯрд░ рдФрд░ рдХреАрдмреЛрд░реНрдб) \"рдореБрдЦреНрдп\" рднрд╛рдЧ рд╣реИрдВ рдХреНрдпреЛрдВрдХрд┐ рд╡реЗ рд░реЛрдЬрдорд░реНрд░рд╛ рдХреЗ рдЙрдкрдпреЛрдЧ рдХреЗ рд▓рд┐рдП рдЖрд╡рд╢реНрдпрдХ рдорд╣рд╕реВрд╕ рдХрд░рддреЗ рд╣реИрдВред",
        core_components_title: "рдореБрдЦреНрдп рдШрдЯрдХ",
        core_components_desc: "рд╕реАрдкреАрдпреВ, рд░реИрдо, рдорджрд░рдмреЛрд░реНрдб = ",
        core_components_desc_span: "рдорд╕реНрддрд┐рд╖реНрдХ рдФрд░ рдЕрдВрдЧ",
        core_components_desc_cont: "ред рдЙрдирдХреЗ рдмрд┐рдирд╛, рдХрдВрдкреНрдпреВрдЯрд░ рдХрд╛рд░реНрдп рдирд╣реАрдВ рдХрд░ рд╕рдХрддрд╛ рд╣реИред",
        peripherals_title: "рдкреЗрд░рд┐рдлреЗрд░рд▓реНрд╕",
        peripherals_desc: "рдХреАрдмреЛрд░реНрдб, рдореЙрдирд┐рдЯрд░, рдорд╛рдЙрд╕ = ",
        peripherals_desc_span: "рд╣рд╛рде, рдЖрдВрдЦреЗрдВ рдФрд░ рдХрд╛рди",
        peripherals_desc_cont: "ред рд╡реЗ рд╣рдореЗрдВ рдмрд╛рддрдЪреАрдд рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддреЗ рд╣реИрдВ рд▓реЗрдХрд┐рди \"рдорд╕реНрддрд┐рд╖реНрдХ\" рдирд╣реАрдВ рд╣реИрдВред",
        examples_title: "рдХреНрдпрд╛ рд╣реЛрдЧрд╛ рдпрджрд┐ рдореЙрдирд┐рдЯрд░ рдПрдХ рдореБрдЦреНрдп рднрд╛рдЧ рд╣реЛрддрд╛?",
        examples_subtitle: "рдХрдИ рдЫрд╛рддреНрд░ рд╕реЛрдЪрддреЗ рд╣реИрдВ рдХрд┐ рдореЙрдирд┐рдЯрд░ рдХрдВрдкреНрдпреВрдЯрд░ рдХрд╛ рдПрдХ рдореБрдЦреНрдп рд╣рд┐рд╕реНрд╕рд╛ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдПред рд▓реЗрдХрд┐рди рдЖрдЗрдП рд╡рд╛рд╕реНрддрд╡рд┐рдХ рджреБрдирд┐рдпрд╛ рдХреЗ рдЙрджрд╛рд╣рд░рдг рджреЗрдЦреЗрдВ рдЬрд╣рд╛рдВ рдХрдВрдкреНрдпреВрдЯрд░ <em>рдмрд┐рдирд╛ рдПрдХ рдХреЗ</em> рдкреВрд░реА рддрд░рд╣ рд╕реЗ рдареАрдХ рдХрд╛рдо рдХрд░рддреЗ рд╣реИрдВред",
        server_title: "рд╕рд░реНрд╡рд░",
        server_text: " рдЗрдВрдЯрд░рдиреЗрдЯ рдЪрд▓рд╛рддреЗ рд╣реИрдВ ЁЯТ╗ред рдЙрдирдХреЗ рдкрд╛рд╕ рдЖрдорддреМрд░ рдкрд░ рдореЙрдирд┐рдЯрд░ рдирд╣реАрдВ рд╣реЛрддреЗ рд╣реИрдВ - рдЙрдиреНрд╣реЗрдВ рдиреЗрдЯрд╡рд░реНрдХ рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рджреВрд░ рд╕реЗ рдкреНрд░рдмрдВрдзрд┐рдд рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред рдЗрд╕реЗ ",
        server_text_span: "рд╣реЗрдбрд▓реЗрд╕ рд╕рд┐рд╕реНрдЯрдо",
        router_title: "рд╡рд╛рдИ-рдлрд╛рдИ рд░рд╛рдЙрдЯрд░",
        router_text: " рдПрдХ рдЫреЛрдЯрд╛ рдХрдВрдкреНрдпреВрдЯрд░ рд╣реИ тЪЩя╕Пред рдЗрд╕рдореЗрдВ рдПрдХ рд╕реАрдкреАрдпреВ, рд░реИрдо рдФрд░ рд╕реНрдЯреЛрд░реЗрдЬ рд╣реИ - рд▓реЗрдХрд┐рди рдХреЛрдИ рдореЙрдирд┐рдЯрд░ рдирд╣реАрдВ рд╣реИ!",
        smarthome_title: "рд╕реНрдорд╛рд░реНрдЯ рд╣реЛрдо рд╣рдм",
        smarthome_text: " рдЬреИрд╕реЗ рдПрд▓реЗрдХреНрд╕рд╛ рдпрд╛ рдЧреВрдЧрд▓ рд╣реЛрдо рдХрдорд╛рдВрдб рдкреНрд░реЛрд╕реЗрд╕ рдХрд░рддреЗ рд╣реИрдВ рдФрд░ рдСрдбрд┐рдпреЛ рдЪрд▓рд╛рддреЗ рд╣реИрдВ ЁЯО╢ - рд╕рднреА рдмрд┐рдирд╛ рд╕реНрдХреНрд░реАрди рдХреЗред",
        embedded_title: "рдПрдВрдмреЗрдбреЗрдб рд╕рд┐рд╕реНрдЯрдо",
        embedded_text: " рдХрд╛рд░реЛрдВ, рдорд╛рдЗрдХреНрд░реЛрд╡реЗрд╡ рдФрд░ рд╡рд╛рд╢рд┐рдВрдЧ рдорд╢реАрди рдЬреИрд╕реА рдЪреАрдЬреЛрдВ рдХреЛ рд╢рдХреНрддрд┐ рдкреНрд░рджрд╛рди рдХрд░рддреЗ рд╣реИрдВ ЁЯЪЧ - рд╡реЗ рдЧрдгрдирд╛ рдХрд░рддреЗ рд╣реИрдВ рд▓реЗрдХрд┐рди рдЖрдкрдХреЛ рдЕрдкрдирд╛ рдХрд╛рдо \"рджрд┐рдЦрд╛рддреЗ\" рдирд╣реАрдВ рд╣реИрдВред",
        takeaway: "ЁЯСЙ рдирд┐рд╖реНрдХрд░реНрд╖: рдЬреИрд╕реЗ рдЗрдВрд╕рд╛рди рдЦреЗрд▓рддреЗ рд╕рдордп рдмреИрдЯ рдФрд░ рдмреЙрд▓ рд╕рд╛рде рд▓реЗрддрд╛ рд╣реИ, рдкрд░ рдХрд┐рддрд╛рдм рдкрдврд╝рддреЗ рд╕рдордп рдЙрдирдХреА рдЬрд╝рд░реВрд░рдд рдирд╣реАрдВ рд╣реЛрддреА, рд╡реИрд╕реЗ рд╣реА рдХрдВрдкреНрдпреВрдЯрд░ рднреА рдкреЗрд░рд┐рдлреЗрд░рд▓ рдбрд┐рд╡рд╛рдЗрд╕ рддрднреА рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░рддрд╛ рд╣реИ рдЬрдм рдЙрдирдХреА рдЬрд╝рд░реВрд░рдд рд╣реЛрддреА рд╣реИред",
        takeaway_span: "рдореБрдЦреНрдп рдШрдЯрдХ",
        takeaway_cont: " (рд╕реАрдкреАрдпреВ, рд░реИрдо, рдорджрд░рдмреЛрд░реНрдб) рд╡рд╛рд╕реНрддрд╡рд┐рдХ рдХрдВрдкреНрдпреВрдЯрд┐рдВрдЧ рдХрд░рддреЗ рд╣реИрдВред рдПрдХ рдореЙрдирд┐рдЯрд░ рдкрд░рд┐рдгрд╛рдореЛрдВ рдХреЛ <em>рджреЗрдЦрдиреЗ</em> рдХрд╛ рд╕рд┐рд░реНрдл рдПрдХ рддрд░реАрдХрд╛ рд╣реИ, рди рдХрд┐ рд╕реНрд╡рдпрдВ рдореБрдЦреНрдп рдорд╕реНрддрд┐рд╖реНрдХ рдХрд╛ рд╣рд┐рд╕реНрд╕рд╛ред",
        previous: "рдкрд┐рдЫрд▓рд╛",
        next: "рдЕрдЧрд▓рд╛",
    }
};

const peripheralExamples = [
    { icon: <FaKeyboard />, label: "Keyboard" },
    { icon: <FaMouse />, label: "Mouse" },
    { icon: <FaHeadphones />, label: "Headphones" },
    { icon: <FaDesktop />, label: "Monitor" },
];

export default function PeripheralsLesson() {
    const [lang, setLang] = useState('en');
    const navigate = useNavigate();
    const t = content[lang];

    return (
        <div className="min-h-screen bg-gradient-to-br from-yellow-50 via-pink-50 to-purple-100 flex flex-col items-center py-8 px-4 sm:px-6 lg:px-8 font-sans">
            <div className="w-full max-w-6xl">
                {/* Header */}
                <div className="flex items-center justify-between mb-8">
                    <Link
                        to="/parts/prt1"
                        className="inline-flex items-center px-4 py-2 bg-white rounded-full shadow-md border border-gray-200 hover:bg-gray-100 transition"
                    >
                        <FaHome className="mr-2 text-lg text-sky-600" />
                        {t.home}
                    </Link>

                    <div className="flex space-x-2">
                        <button
                            onClick={() => setLang("en")}
                            className={`px-3 py-1 rounded-lg border font-semibold ${lang === "en"
                                ? "bg-sky-600 text-white border-sky-600"
                                : "bg-white text-gray-700 border-gray-300"
                                } transition`}
                        >
                            EN
                        </button>
                        <button
                            onClick={() => setLang("hi")}
                            className={`px-3 py-1 rounded-lg border font-semibold ${lang === "hi"
                                ? "bg-sky-600 text-white border-sky-600"
                                : "bg-white text-gray-700 border-gray-300"
                                } transition`}
                        >
                            рд╣рд┐рдВ
                        </button>
                    </div>
                </div>

                {/* Title */}
                <motion.h1
                    initial={{ scale: 0.8, opacity: 0 }}
                    animate={{ scale: 1, opacity: 1 }}
                    transition={{ duration: 0.7, type: "spring" }}
                    className="text-3xl sm:text-4xl lg:text-5xl font-extrabold text-purple-700 mb-8 drop-shadow-lg text-center"
                >
                    {t.title}
                </motion.h1>

                {/* Definition Section */}
                <motion.div
                    whileHover={{ scale: 1.02 }}
                    className="bg-white rounded-2xl shadow-lg p-6 max-w-3xl mx-auto mb-10 text-center border-2 border-purple-200"
                >
                    <p className="text-lg lg:text-xl font-medium text-gray-700">
                        {t.def_part1}
                        <span className="font-bold text-purple-600">{t.def_part1_span}</span>
                        {t.def_part2}
                        <span className="bg-yellow-300 px-1 py-1 rounded">{t.def_part2_span}</span>
                        {t.def_part3}
                    </p>
                    <p className="mt-3 text-gray-600 italic">{t.def_desc}</p>
                </motion.div>

                {/* Confusion Section */}
                <motion.div
                    initial={{ x: -100, opacity: 0 }}
                    animate={{ x: 0, opacity: 1 }}
                    transition={{ duration: 0.8 }}
                    className="bg-purple-50 rounded-2xl shadow-md p-6 max-w-xl mx-auto mb-10 text-center border-2 border-yellow-300"
                >
                    <h2 className="text-xl sm:text-2xl font-semibold text-purple-700 mb-2">
                        {t.confusion_title}
                    </h2>
                    <p className="text-gray-700">{t.confusion_text}</p>
                </motion.div>

                {/* Core vs Peripherals */}
                <motion.div
                    initial={{ y: 50, opacity: 0 }}
                    animate={{ y: 0, opacity: 1 }}
                    transition={{ duration: 0.8, delay: 0.3 }}
                    className="flex flex-col md:flex-row items-center justify-center gap-6 mb-12"
                >
                    <motion.div
                        whileHover={{ rotate: -2, scale: 1.05 }}
                        className="bg-white rounded-xl p-6 shadow-md border-2 border-purple-400 w-full md:w-80 text-center"
                    >
                        <FaBrain className="text-5xl text-purple-600 mx-auto mb-3" />
                        <h3 className="text-lg font-bold text-purple-700">
                            {t.core_components_title}
                        </h3>
                        <p className="text-sm text-gray-600">
                            {t.core_components_desc}
                            <span className="font-semibold">{t.core_components_desc_span}</span>
                            {t.core_components_desc_cont}
                        </p>
                    </motion.div>

                    <motion.div
                        animate={{ x: [0, 10, 0] }}
                        transition={{ repeat: Infinity, duration: 1.5 }}
                        className="text-3xl text-purple-500 rotate-90 md:rotate-0"
                    >
                        тЮбя╕П
                    </motion.div>

                    <motion.div
                        whileHover={{ rotate: 2, scale: 1.05 }}
                        className="bg-white rounded-xl p-6 shadow-md border-2 border-yellow-400 w-full md:w-80 text-center"
                    >
                        <FaHandPaper className="text-5xl text-yellow-500 mx-auto mb-3" />
                        <h3 className="text-lg font-bold text-yellow-600">{t.peripherals_title}</h3>
                        <p className="text-sm text-gray-600">
                            {t.peripherals_desc}
                            <span className="font-semibold">{t.peripherals_desc_span}</span>
                            {t.peripherals_desc_cont}
                        </p>
                    </motion.div>
                </motion.div>

                {/* Peripheral Examples */}
                <div className="grid grid-cols-2 sm:grid-cols-4 gap-4 sm:gap-6 mb-12">
                    {peripheralExamples.map((item, idx) => (
                        <motion.div
                            key={idx}
                            whileHover={{ scale: 1.15, rotate: 3 }}
                            className="bg-white rounded-xl shadow-lg p-4 flex flex-col items-center border border-gray-200"
                        >
                            <div className="text-4xl text-purple-500 mb-2">{item.icon}</div>
                            <p className="text-sm font-semibold text-gray-700">{item.label}</p>
                        </motion.div>
                    ))}
                </div>

                {/* Examples Section */}
                <motion.div
                    className="p-6 bg-purple-50 rounded-2xl shadow-lg max-w-4xl mx-auto mt-8"
                    initial={{ opacity: 0, y: 50 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.8 }}
                >
                    <h2 className="text-2xl sm:text-3xl font-bold text-purple-800 mb-4">
                        {t.examples_title}
                    </h2>
                    <p
                        className="text-base lg:text-lg mb-4"
                        dangerouslySetInnerHTML={{ __html: t.examples_subtitle }}
                    />

                    <div className="space-y-4">
                        <motion.div
                            className="flex items-center gap-4 bg-white p-4 rounded-xl shadow"
                            whileHover={{ scale: 1.02 }}
                        >
                            <Server className="text-purple-600 w-10 h-10 flex-shrink-0" />
                            <p>
                                <span className="font-bold text-purple-700">{t.server_title}</span>
                                {t.server_text}
                                <span className="bg-pink-200 px-1 rounded">{t.server_text_span}</span>.
                            </p>
                        </motion.div>

                        <motion.div
                            className="flex items-center gap-4 bg-white p-4 rounded-xl shadow"
                            whileHover={{ scale: 1.02 }}
                        >
                            <Router className="text-green-600 w-10 h-10 flex-shrink-0" />
                            <p>
                                <span className="font-bold text-green-700">{t.router_title}</span>
                                {t.router_text}
                            </p>
                        </motion.div>

                        <motion.div
                            className="flex items-center gap-4 bg-white p-4 rounded-xl shadow"
                            whileHover={{ scale: 1.02 }}
                        >
                            <HomeIcon className="text-blue-600 w-10 h-10 flex-shrink-0" />
                            <p>
                                <span className="font-bold text-blue-700">{t.smarthome_title}</span>
                                {t.smarthome_text}
                            </p>
                        </motion.div>

                        <motion.div
                            className="flex items-center gap-4 bg-white p-4 rounded-xl shadow"
                            whileHover={{ scale: 1.02 }}
                        >
                            <Cpu className="text-red-600 w-10 h-10 flex-shrink-0" />
                            <p>
                                <span className="font-bold text-red-700">{t.embedded_title}</span>
                                {t.embedded_text}
                            </p>
                        </motion.div>
                    </div>

                    <p
                        className="mt-6 text-lg"
                        dangerouslySetInnerHTML={{
                            __html: t.takeaway.replace(
                                "{takeaway_span}",
                                `<span class="bg-yellow-200 px-2 rounded">${t.takeaway_span}</span>`
                            ),
                        }}
                    />
                </motion.div>

                {/* Navigation */}
                <div className="w-full flex justify-between items-center mt-12 p-4 bg-gray-100 rounded-lg shadow-md">
                    <motion.button
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        onClick={() => navigate("/part1/input-output-devices")}
                        className="flex items-center gap-2 px-4 py-2 bg-purple-200 hover:bg-purple-300 text-purple-900 rounded-lg shadow transition"
                    >
                        <FaArrowLeft />
                        {t.previous}
                    </motion.button>

                    <motion.button
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        onClick={() => navigate("/part1/tertiary-storage")}
                        className="flex items-center gap-2 px-4 py-2 bg-green-200 hover:bg-green-300 text-green-900 rounded-lg shadow transition"
                    >
                        {t.next}
                        <FaArrowRight />
                    </motion.button>
                </div>
            </div>
        </div>

    );
}
