import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Link, useNavigate } from 'react-router-dom';
import { FaArrowLeft, FaArrowRight, FaHome } from "react-icons/fa";

// --- SDLC Stages Data ---
const sdlcStages = [
    {
        id: 0,
        name: 'What is SDLC?',
        icon: 'ЁЯУШ',
        color: '#16a085',
        description:
            'SDLC stands for Software Development Life Cycle. It is a step-by-step plan to make software. It helps developers know what to do, when to do it, and how to check their work. Following SDLC reduces mistakes and makes sure the software works well for users.',
        analogy: {
            title: 'Analogy: Following a Recipe ЁЯН░',
            text: 'Just like baking a cake, you need a plan. You list ingredients, follow steps, and check if it tastes good. Without a plan, you could forget sugar or burn the cake. SDLC is like a recipe for building software.'
        },
        example:
            'Imagine you want to make a simple quiz app. SDLC helps you plan what the app will do, how it will look, how to build it, test it, and finally share it with friends.'
    },
    {
        id: 1,
        name: 'Planning & Requirement Analysis',
        icon: 'ЁЯдФ',
        color: '#8e44ad',
        description:
            'This is the first step where we decide what the software should do. We talk to people who will use it, think about the features, and figure out if it is possible with the time and tools we have. We make a simple plan for what to build first.',
        analogy: {
            title: 'Analogy: Planning a Party ЁЯОЙ',
            text: 'Before throwing a party, you decide the number of guests, the food, the games, and the decorations. You make a list so nothing is forgotten. Similarly, in planning, we list all the features the software should have.'
        },
        example:
            'If making a quiz app, planning decides how many questions, how scoring works, and what colors or buttons the app should have.'
    },
    {
        id: 2,
        name: 'Design',
        icon: 'ЁЯОи',
        color: '#3498db',
        description:
            'In this step, we decide how the software will look and work. We design the screens, buttons, and menus. We also decide how the pieces of the app will work together behind the scenes.',
        analogy: {
            title: 'Analogy: Drawing a Map ЁЯЧ║я╕П',
            text: 'Before building a maze, you draw a map showing all the paths and dead ends. This helps builders know exactly what to make. In design, we draw a plan for the appтАЩs look and flow.'
        },
        example:
            'For the quiz app, designers create pictures showing where questions appear, how the next button works, and what colors to use.'
    },
    {
        id: 3,
        name: 'Implementation / Development',
        icon: 'ЁЯТ╗',
        color: '#27ae60',
        description:
            'Now itтАЩs time to write the code! Developers follow the design to create the software. Each part is built carefully, like putting together blocks to make a bigger structure.',
        analogy: {
            title: 'Analogy: Building with Lego ЁЯз▒',
            text: 'You follow instructions to build a Lego set, piece by piece. Each piece has its place, and when combined, it becomes the complete model. Coding is similar.'
        },
        example:
            'In the quiz app, developers write code for the questions, scoring, and buttons so the app works correctly.'
    },
    {
        id: 4,
        name: 'Testing',
        icon: 'ЁЯзк',
        color: '#f1c40f',
        description:
            'We check the software to see if it works properly. We look for mistakes or problems and fix them. Testing ensures the app does what it is supposed to do.',
        analogy: {
            title: 'Analogy: Taste Testing ЁЯНк',
            text: 'After baking cookies, you taste them to see if they are sweet enough or not burnt. You fix problems before sharing with friends. Testing software is like taste testing.'
        },
        example:
            'In the quiz app, testing checks if questions show up correctly, scores count right, and buttons do what they should.'
    },
    {
        id: 5,
        name: 'Deployment',
        icon: 'ЁЯЪА',
        color: '#e67e22',
        description:
            'Once everything works well, we release the software so users can use it. Deployment can be simple or gradual, depending on how many users there are.',
        analogy: {
            title: 'Analogy: Sharing Your Game ЁЯХ╣я╕П',
            text: 'After creating a board game, you give it to friends to play. Deployment is when the software becomes available for everyone to use.'
        },
        example:
            'The quiz app is uploaded to the app store or website so classmates can try it.'
    },
    {
        id: 6,
        name: 'Maintenance',
        icon: 'ЁЯЫая╕П',
        color: '#c0392b',
        description:
            'After users start using the software, we keep it running smoothly. We fix any problems, improve features, and update it as needed.',
        analogy: {
            title: 'Analogy: Taking Care of a Garden ЁЯМ▒',
            text: 'After planting, you water plants, remove weeds, and make changes to help them grow. Maintaining software is similar; you keep it healthy and useful.'
        },
        example:
            'If the quiz app has a bug or a feature request, developers fix it or add new features to make it better for users.'
    }
];
const sdlcStagesHindi = [
    {
        id: 0,
        name: 'SDLC рдХреНрдпрд╛ рд╣реИ?',
        icon: 'ЁЯУШ',
        color: '#16a085',
        description:
            'SDLC рдХрд╛ рдорддрд▓рдм Software Development Life Cycle рд╣реИред рдпрд╣ рд╕реЙрдлрд╝реНрдЯрд╡реЗрдпрд░ рдмрдирд╛рдиреЗ рдХреА рдПрдХ step-by-step рдпреЛрдЬрдирд╛ рд╣реИред рдЗрд╕рд╕реЗ рдбреЗрд╡рд▓рдкрд░реНрд╕ рдХреЛ рдкрддрд╛ рдЪрд▓рддрд╛ рд╣реИ рдХрд┐ рдХреНрдпрд╛ рдХрд░рдирд╛ рд╣реИ, рдХрдм рдХрд░рдирд╛ рд╣реИ рдФрд░ рдХрд╛рдо рдХреА рдЬрд╛рдВрдЪ рдХреИрд╕реЗ рдХрд░рдиреА рд╣реИред SDLC рдХрд╛ рдкрд╛рд▓рди рдХрд░рдиреЗ рд╕реЗ рдЧрд▓рддрд┐рдпрд╛рдБ рдХрдо рд╣реЛрддреА рд╣реИрдВ рдФрд░ рд╕реЙрдлрд╝реНрдЯрд╡реЗрдпрд░ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЗ рд▓рд┐рдП рд╕рд╣реА рдврдВрдЧ рд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИред',
        analogy: {
            title: 'рдЙрджрд╛рд╣рд░рдг: рд░реЗрд╕рд┐рдкреА рдХрд╛ рдкрд╛рд▓рди рдХрд░рдирд╛ ЁЯН░',
            text: 'рдЬреИрд╕реЗ рдХреЗрдХ рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдпреЛрдЬрдирд╛ рдмрдирд╛рдиреА рдкрдбрд╝рддреА рд╣реИ, рд╕рд╛рдордЧреНрд░реА рдХреА рд╕реВрдЪреА рдмрдирд╛рдиреА рд╣реЛрддреА рд╣реИ, рдЪрд░рдгреЛрдВ рдХрд╛ рдкрд╛рд▓рди рдХрд░рдирд╛ рд╣реЛрддрд╛ рд╣реИ рдФрд░ рдЯреЗрд╕реНрдЯ рдХрд░рдирд╛ рдкрдбрд╝рддрд╛ рд╣реИ рдХрд┐ рд╕реНрд╡рд╛рдж рд╕рд╣реА рд╣реИ рдпрд╛ рдирд╣реАрдВред SDLC рднреА рд╕реЙрдлрд╝реНрдЯрд╡реЗрдпрд░ рдмрдирд╛рдиреЗ рдХреА рд░реЗрд╕рд┐рдкреА рдХреА рддрд░рд╣ рд╣реИред'
        },
        example:
            'рдорд╛рди рд▓реАрдЬрд┐рдП рдЖрдк рдПрдХ рдХреНрд╡рд┐рдЬрд╝ рдРрдк рдмрдирд╛рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВред SDLC рдЖрдкрдХреЛ рдпреЛрдЬрдирд╛ рдмрдирд╛рдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реИ рдХрд┐ рдРрдк рдХреНрдпрд╛ рдХрд░реЗрдЧрд╛, рдХреИрд╕рд╛ рджрд┐рдЦреЗрдЧрд╛, рдХреИрд╕реЗ рдмрдирд╛рдпрд╛ рдЬрд╛рдПрдЧрд╛, рдЯреЗрд╕реНрдЯ рдХреИрд╕реЗ рдХрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛ рдФрд░ рдЕрдВрдд рдореЗрдВ рджреЛрд╕реНрддреЛрдВ рдХреЗ рд╕рд╛рде рд╕рд╛рдЭрд╛ рдХреИрд╕реЗ рдХрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛ред'
    },
    {
        id: 1,
        name: 'рдпреЛрдЬрдирд╛ рдФрд░ рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг',
        icon: 'ЁЯдФ',
        color: '#8e44ad',
        description:
            'рдпрд╣ рдкрд╣рд▓рд╛ рдЪрд░рдг рд╣реИ рдЬрд┐рд╕рдореЗрдВ рд╣рдо рддрдп рдХрд░рддреЗ рд╣реИрдВ рдХрд┐ рд╕реЙрдлрд╝реНрдЯрд╡реЗрдпрд░ рдХреНрдпрд╛ рдХрд░реЗрдЧрд╛ред рд╣рдо рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рд╕реЗ рдмрд╛рдд рдХрд░рддреЗ рд╣реИрдВ, рдлреАрдЪрд░реНрд╕ рд╕реЛрдЪрддреЗ рд╣реИрдВ рдФрд░ рддрдп рдХрд░рддреЗ рд╣реИрдВ рдХрд┐ рдХреНрдпрд╛ рд╕рдордп рдФрд░ рдЙрдкрдХрд░рдгреЛрдВ рдХреЗ рд╕рд╛рде рдЗрд╕реЗ рдХрд░рдирд╛ рд╕рдВрднрд╡ рд╣реИред рд╣рдо рддрдп рдХрд░рддреЗ рд╣реИрдВ рдХрд┐ рдкрд╣рд▓реЗ рдХреНрдпрд╛ рдмрдирд╛рдирд╛ рд╣реИред',
        analogy: {
            title: 'рдЙрджрд╛рд╣рд░рдг: рдкрд╛рд░реНрдЯреА рдХреА рдпреЛрдЬрдирд╛ рдмрдирд╛рдирд╛ ЁЯОЙ',
            text: 'рдкрд╛рд░реНрдЯреА рдХрд░рдиреЗ рд╕реЗ рдкрд╣рд▓реЗ, рдЖрдк рддрдп рдХрд░рддреЗ рд╣реИрдВ рдХрд┐ рдХрд┐рддрдиреЗ рдореЗрд╣рдорд╛рди рдЖрдПрдВрдЧреЗ, рдЦрд╛рдирд╛ рдХреНрдпрд╛ рд╣реЛрдЧрд╛, рдЦреЗрд▓ рдФрд░ рд╕рдЬрд╛рд╡рдЯ рдХреИрд╕реА рд╣реЛрдЧреАред рдЗрд╕реА рддрд░рд╣, рд╕реЙрдлрд╝реНрдЯрд╡реЗрдпрд░ рдХреЗ рд▓рд┐рдП рднреА рд╕рднреА рдлреАрдЪрд░реНрд╕ рдХреА рдпреЛрдЬрдирд╛ рдмрдирд╛рдИ рдЬрд╛рддреА рд╣реИред'
        },
        example:
            'рдЕрдЧрд░ рдЖрдк рдХреНрд╡рд┐рдЬрд╝ рдРрдк рдмрдирд╛ рд░рд╣реЗ рд╣реИрдВ, рддреЛ рдпреЛрдЬрдирд╛ рддрдп рдХрд░рддреА рд╣реИ рдХрд┐ рдХрд┐рддрдиреЗ рдкреНрд░рд╢реНрди рд╣реЛрдВрдЧреЗ, рд╕реНрдХреЛрд░ рдХреИрд╕реЗ рд╣реЛрдЧрд╛, рдРрдк рдХреЗ рд░рдВрдЧ рдФрд░ рдмрдЯрди рдХреИрд╕реЗ рджрд┐рдЦреЗрдВрдЧреЗред'
    },
    {
        id: 2,
        name: 'рдбрд┐рдЬрд╝рд╛рдЗрди',
        icon: 'ЁЯОи',
        color: '#3498db',
        description:
            'рдЗрд╕ рдЪрд░рдг рдореЗрдВ рд╣рдо рддрдп рдХрд░рддреЗ рд╣реИрдВ рдХрд┐ рд╕реЙрдлрд╝реНрдЯрд╡реЗрдпрд░ рдХреИрд╕рд╛ рджрд┐рдЦреЗрдЧрд╛ рдФрд░ рдХрд╛рдо рдХрд░реЗрдЧрд╛ред рд╕реНрдХреНрд░реАрди, рдмрдЯрди, рдореЗрдиреВ рдбрд┐рдЬрд╝рд╛рдЗрди рдХрд┐рдП рдЬрд╛рддреЗ рд╣реИрдВред рдпрд╣ рднреА рддрдп рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ рдХрд┐ рдРрдк рдХреЗ рд╣рд┐рд╕реНрд╕реЗ рдкреАрдЫреЗ рд╕реЗ рдХреИрд╕реЗ рдХрд╛рдо рдХрд░реЗрдВрдЧреЗред',
        analogy: {
            title: 'рдЙрджрд╛рд╣рд░рдг: рдирдХреНрд╢рд╛ рдмрдирд╛рдирд╛ ЁЯЧ║я╕П',
            text: 'рднреВрд▓реЗрднрдЯрдХреЗ рдХреЛ рдмрдирд╛рдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рдЖрдк рдЙрд╕рдХрд╛ рдирдХреНрд╢рд╛ рдмрдирд╛рддреЗ рд╣реИрдВ рдЬрд┐рд╕рдореЗрдВ рд░рд╛рд╕реНрддреЗ рдФрд░ рдбреЗрдб-рдПрдВрдб рджрд┐рдЦрд╛рдП рдЬрд╛рддреЗ рд╣реИрдВред рдбрд┐рдЬрд╝рд╛рдЗрди рдореЗрдВ рд╣рдо рдРрдк рдХреА рд░реВрдкрд░реЗрдЦрд╛ рдФрд░ рдлреНрд▓реЛ рдмрдирд╛рддреЗ рд╣реИрдВред'
        },
        example:
            'рдХреНрд╡рд┐рдЬрд╝ рдРрдк рдХреЗ рд▓рд┐рдП, рдбрд┐рдЬрд╝рд╛рдЗрдирд░ рдЪрд┐рддреНрд░ рдмрдирд╛рддреЗ рд╣реИрдВ рдХрд┐ рдкреНрд░рд╢реНрди рдХрд╣рд╛рдБ рджрд┐рдЦреЗрдВрдЧреЗ, рдЕрдЧрд▓реЗ рдмрдЯрди рдХрд╛ рдХрд╛рдо рдХреИрд╕реЗ рд╣реЛрдЧрд╛, рдФрд░ рд░рдВрдЧ рдХреИрд╕реЗ рд╣реЛрдВрдЧреЗред'
    },
    {
        id: 3,
        name: 'рдЗрдореНрдкреНрд▓реАрдореЗрдВрдЯреЗрд╢рди / рдбреЗрд╡рд▓рдкрдореЗрдВрдЯ',
        icon: 'ЁЯТ╗',
        color: '#27ae60',
        description:
            'рдЕрдм рдХреЛрдб рд▓рд┐рдЦрдиреЗ рдХрд╛ рд╕рдордп рд╣реИ! рдбреЗрд╡рд▓рдкрд░реНрд╕ рдбрд┐рдЬрд╝рд╛рдЗрди рдХрд╛ рдкрд╛рд▓рди рдХрд░рддреЗ рд╣реБрдП рд╕реЙрдлрд╝реНрдЯрд╡реЗрдпрд░ рдмрдирд╛рддреЗ рд╣реИрдВред рд╣рд░ рд╣рд┐рд╕реНрд╕рд╛ рдзреНрдпрд╛рди рд╕реЗ рдмрдирд╛рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ, рдЬреИрд╕реЗ рдмреНрд▓реЙрдХреНрд╕ рдХреЛ рдЬреЛрдбрд╝рдХрд░ рдмрдбрд╝реА рд╕рдВрд░рдЪрдирд╛ рдмрдирд╛рдирд╛ред',
        analogy: {
            title: 'рдЙрджрд╛рд╣рд░рдг: рд▓реЗрдЧреЛ рд╕реЗ рдирд┐рд░реНрдорд╛рдг ЁЯз▒',
            text: 'рдЖрдк рдирд┐рд░реНрджреЗрд╢реЛрдВ рдХрд╛ рдкрд╛рд▓рди рдХрд░рдХреЗ рд▓реЗрдЧреЛ рд╕реЗрдЯ рдмрдирд╛рддреЗ рд╣реИрдВ, рдПрдХ-рдПрдХ рдЯреБрдХрдбрд╝рд╛ рдЬреЛрдбрд╝рддреЗ рд╣реИрдВред рдХреЛрдбрд┐рдВрдЧ рднреА рдЗрд╕реА рддрд░рд╣ рд╣реЛрддреА рд╣реИред'
        },
        example:
            'рдХреНрд╡рд┐рдЬрд╝ рдРрдк рдореЗрдВ, рдбреЗрд╡рд▓рдкрд░реНрд╕ рдкреНрд░рд╢реНрди, рд╕реНрдХреЛрд░ рдФрд░ рдмрдЯрди рдХреЗ рд▓рд┐рдП рдХреЛрдб рд▓рд┐рдЦрддреЗ рд╣реИрдВ рддрд╛рдХрд┐ рдРрдк рд╕рд╣реА рддрд░реАрдХреЗ рд╕реЗ рдХрд╛рдо рдХрд░реЗред'
    },
    {
        id: 4,
        name: 'рдЯреЗрд╕реНрдЯрд┐рдВрдЧ',
        icon: 'ЁЯзк',
        color: '#f1c40f',
        description:
            'рд╣рдо рд╕реЙрдлрд╝реНрдЯрд╡реЗрдпрд░ рдХреА рдЬрд╛рдВрдЪ рдХрд░рддреЗ рд╣реИрдВ рдХрд┐ рдпрд╣ рд╕рд╣реА рдХрд╛рдо рдХрд░ рд░рд╣рд╛ рд╣реИ рдпрд╛ рдирд╣реАрдВред рд╣рдо рдЧрд▓рддрд┐рдпреЛрдВ рдФрд░ рд╕рдорд╕реНрдпрд╛рдУрдВ рдХреЛ рдвреВрдВрдврддреЗ рд╣реИрдВ рдФрд░ рдЙрдиреНрд╣реЗрдВ рдареАрдХ рдХрд░рддреЗ рд╣реИрдВред рдЯреЗрд╕реНрдЯрд┐рдВрдЧ рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддреА рд╣реИ рдХрд┐ рдРрдк рд╡реИрд╕рд╛ рд╣реА рдХрд╛рдо рдХрд░реЗ рдЬреИрд╕рд╛ рд╕реЛрдЪрд╛ рдЧрдпрд╛ рд╣реИред',
        analogy: {
            title: 'рдЙрджрд╛рд╣рд░рдг: рдЯреЗрд╕реНрдЯ рдХрд░рдирд╛ ЁЯНк',
            text: 'рдХреБрдХреАрдЬрд╝ рдмреЗрдХ рдХрд░рдиреЗ рдХреЗ рдмрд╛рдж, рдЖрдк рдЙрдиреНрд╣реЗрдВ рдЪрдЦрддреЗ рд╣реИрдВ рдХрд┐ рдХреНрдпрд╛ рд╕реНрд╡рд╛рдж рд╕рд╣реА рд╣реИ рдФрд░ рдЬрд▓реА рдирд╣реАрдВ рд╣реИрдВред рдЯреЗрд╕реНрдЯрд┐рдВрдЧ рд╕реЙрдлрд╝реНрдЯрд╡реЗрдпрд░ рдХреЗ рд▓рд┐рдП рднреА рдРрд╕рд╛ рд╣реА рд╣реИред'
        },
        example:
            'рдХреНрд╡рд┐рдЬрд╝ рдРрдк рдореЗрдВ, рдЯреЗрд╕реНрдЯрд┐рдВрдЧ рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддреА рд╣реИ рдХрд┐ рдкреНрд░рд╢реНрди рд╕рд╣реА рджрд┐рдЦреЗрдВ, рд╕реНрдХреЛрд░ рд╕рд╣реА рдЧрд┐рдиреЗ рдЬрд╛рдПрдВ рдФрд░ рдмрдЯрди рд╕рд╣реА рдХрд╛рдо рдХрд░реЗрдВред'
    },
    {
        id: 5,
        name: 'рдбрд┐рдкреНрд▓реЙрдпрдореЗрдВрдЯ',
        icon: 'ЁЯЪА',
        color: '#e67e22',
        description:
            'рдЬрдм рд╕рдм рдХреБрдЫ рд╕рд╣реА рд╕реЗ рдХрд╛рдо рдХрд░рдиреЗ рд▓рдЧреЗ, рд╣рдо рд╕реЙрдлрд╝реНрдЯрд╡реЗрдпрд░ рдХреЛ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЗ рд▓рд┐рдП рдЬрд╛рд░реА рдХрд░рддреЗ рд╣реИрдВред рдбрд┐рдкреНрд▓реЙрдпрдореЗрдВрдЯ рд╕рд░рд▓ рдпрд╛ рдХреНрд░рдорд┐рдХ рд╣реЛ рд╕рдХрддрд╛ рд╣реИ, рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреА рд╕рдВрдЦреНрдпрд╛ рдкрд░ рдирд┐рд░реНрднрд░ рдХрд░рддрд╛ рд╣реИред',
        analogy: {
            title: 'рдЙрджрд╛рд╣рд░рдг: рдЧреЗрдо рд╕рд╛рдЭрд╛ рдХрд░рдирд╛ ЁЯХ╣я╕П',
            text: 'рдмреЛрд░реНрдб рдЧреЗрдо рдмрдирд╛рдиреЗ рдХреЗ рдмрд╛рдж, рдЖрдк рдЗрд╕реЗ рджреЛрд╕реНрддреЛрдВ рдХреЗ рд╕рд╛рде рдЦреЗрд▓рддреЗ рд╣реИрдВред рдбрд┐рдкреНрд▓реЙрдпрдореЗрдВрдЯ рддрдм рд╣реЛрддрд╛ рд╣реИ рдЬрдм рд╕реЙрдлрд╝реНрдЯрд╡реЗрдпрд░ рд╕рднреА рдХреЗ рд▓рд┐рдП рдЙрдкрд▓рдмреНрдз рд╣реЛ рдЬрд╛рддрд╛ рд╣реИред'
        },
        example:
            'рдХреНрд╡рд┐рдЬрд╝ рдРрдк рдХреЛ рдРрдк рд╕реНрдЯреЛрд░ рдпрд╛ рд╡реЗрдмрд╕рд╛рдЗрдЯ рдкрд░ рдЕрдкрд▓реЛрдб рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ рддрд╛рдХрд┐ рдЫрд╛рддреНрд░ рдЗрд╕реЗ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░ рд╕рдХреЗрдВред'
    },
    {
        id: 6,
        name: 'рд░рдЦрд░рдЦрд╛рд╡ / рдореЗрдВрдЯреЗрдиреЗрдВрд╕',
        icon: 'ЁЯЫая╕П',
        color: '#c0392b',
        description:
            'рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рд╕реЙрдлрд╝реНрдЯрд╡реЗрдпрд░ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рд▓рдЧреЗ, рддреЛ рд╣рдо рдЗрд╕реЗ рд╕реБрдЪрд╛рд░реВ рд░реВрдк рд╕реЗ рдЪрд▓рд╛рддреЗ рд░рд╣рддреЗ рд╣реИрдВред рд╣рдо рдХрд┐рд╕реА рднреА рд╕рдорд╕реНрдпрд╛ рдХреЛ рдареАрдХ рдХрд░рддреЗ рд╣реИрдВ, рдлреАрдЪрд░реНрд╕ рд╕реБрдзрд╛рд░рддреЗ рд╣реИрдВ рдФрд░ рдЬрд░реВрд░рдд рдкрдбрд╝рдиреЗ рдкрд░ рдЕрдкрдбреЗрдЯ рдХрд░рддреЗ рд╣реИрдВред',
        analogy: {
            title: 'рдЙрджрд╛рд╣рд░рдг: рдмрд╛рдЧрд╝ рдХреА рджреЗрдЦрднрд╛рд▓ ЁЯМ▒',
            text: 'рдкреМрдзреЗ рд▓рдЧрд╛рдиреЗ рдХреЗ рдмрд╛рдж, рдЖрдк рдЙрдиреНрд╣реЗрдВ рдкрд╛рдиреА рджреЗрддреЗ рд╣реИрдВ, рдЬрдВрдЧрд▓реА рдкреМрдзреЛрдВ рдХреЛ рд╣рдЯрд╛рддреЗ рд╣реИрдВ рдФрд░ рд╡рд┐рдХрд╛рд╕ рдХреЗ рд▓рд┐рдП рдмрджрд▓рд╛рд╡ рдХрд░рддреЗ рд╣реИрдВред рд╕реЙрдлрд╝реНрдЯрд╡реЗрдпрд░ рдХреЛ рдореЗрдВрдЯреЗрди рдХрд░рдирд╛ рднреА рдРрд╕рд╛ рд╣реА рд╣реИред'
        },
        example:
            'рдпрджрд┐ рдХреНрд╡рд┐рдЬрд╝ рдРрдк рдореЗрдВ рдХреЛрдИ рдмрдЧ рдпрд╛ рдирдпрд╛ рдлреАрдЪрд░ рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдЖрддрд╛ рд╣реИ, рддреЛ рдбреЗрд╡рд▓рдкрд░реНрд╕ рдЗрд╕реЗ рд╕реБрдзрд╛рд░рддреЗ рд╣реИрдВ рдпрд╛ рдирдП рдлреАрдЪрд░ рдЬреЛрдбрд╝рддреЗ рд╣реИрдВред'
    }
];

// --- Animation Variants ---
const contentVariants = {
    hidden: { opacity: 0, y: 30, scale: 0.98 },
    visible: { opacity: 1, y: 0, scale: 1, transition: { duration: 0.5, type: 'spring', bounce: 0.4 } },
    exit: { opacity: 0, y: -30, scale: 1.02, transition: { duration: 0.3 } }
};

// --- Animated SVG per Stage ---
function AnimatedSVG({ stage }) {
    switch (stage.id) {
        case 0:
            return (
                <motion.svg width="50" height="50" viewBox="0 0 50 50"
                    initial={{ rotate: 0 }} animate={{ rotate: 360 }} transition={{ repeat: Infinity, duration: 8, ease: 'linear' }}>
                    <circle cx="25" cy="25" r="20" fill={stage.color} opacity={0.3} />
                    <text x="50%" y="50%" textAnchor="middle" dominantBaseline="middle" fontSize="20" fill="white">{stage.icon}</text>
                </motion.svg>
            );
        case 1:
            return (
                <motion.svg width="50" height="50" viewBox="0 0 50 50"
                    initial={{ scale: 0.8 }} animate={{ scale: [0.8, 1.05, 0.95, 1] }}
                    transition={{ repeat: Infinity, duration: 2, ease: 'easeInOut' }}>
                    <rect x="10" y="10" width="30" height="30" rx="5" fill={stage.color} opacity={0.4} />
                    <text x="50%" y="50%" textAnchor="middle" dominantBaseline="middle" fontSize="20" fill="white">{stage.icon}</text>
                </motion.svg>
            );
        case 2:
            return (
                <motion.svg width="50" height="50" viewBox="0 0 50 50"
                    initial={{ y: -5 }} animate={{ y: [0, -5, 0, 5, 0] }}
                    transition={{ repeat: Infinity, duration: 3, ease: 'easeInOut' }}>
                    <polygon points="25,5 45,45 5,45" fill={stage.color} opacity={0.4} />
                    <text x="50%" y="60%" textAnchor="middle" dominantBaseline="middle" fontSize="18" fill="white">{stage.icon}</text>
                </motion.svg>
            );
        case 3:
            return (
                <motion.svg width="50" height="50" viewBox="0 0 50 50"
                    initial={{ rotate: -10 }} animate={{ rotate: [-10, 10, -10] }}
                    transition={{ repeat: Infinity, duration: 1.5, ease: 'easeInOut' }}>
                    <circle cx="25" cy="25" r="15" fill={stage.color} opacity={0.5} />
                    <text x="50%" y="50%" textAnchor="middle" dominantBaseline="middle" fontSize="20" fill="white">{stage.icon}</text>
                </motion.svg>
            );
        case 4:
            return (
                <motion.svg width="50" height="50" viewBox="0 0 50 50"
                    initial={{ scale: 1 }} animate={{ scale: [1, 1.2, 1, 1.2, 1] }}
                    transition={{ repeat: Infinity, duration: 1.5, ease: 'easeInOut' }}>
                    <ellipse cx="25" cy="25" rx="20" ry="10" fill={stage.color} opacity={0.4} />
                    <text x="50%" y="50%" textAnchor="middle" dominantBaseline="middle" fontSize="18" fill="white">{stage.icon}</text>
                </motion.svg>
            );
        case 5:
            return (
                <motion.svg width="50" height="50" viewBox="0 0 50 50"
                    initial={{ y: 0 }} animate={{ y: [0, -8, 0, -8, 0] }}
                    transition={{ repeat: Infinity, duration: 2, ease: 'easeInOut' }}>
                    <polygon points="25,0 45,50 5,50" fill={stage.color} opacity={0.5} />
                    <text x="50%" y="60%" textAnchor="middle" dominantBaseline="middle" fontSize="18" fill="white">{stage.icon}</text>
                </motion.svg>
            );
        case 6:
            return (
                <motion.svg width="50" height="50" viewBox="0 0 50 50"
                    initial={{ rotate: 0 }} animate={{ rotate: [0, 20, -20, 0] }}
                    transition={{ repeat: Infinity, duration: 3, ease: 'easeInOut' }}>
                    <circle cx="25" cy="25" r="18" fill={stage.color} opacity={0.3} />
                    <text x="50%" y="50%" textAnchor="middle" dominantBaseline="middle" fontSize="18" fill="white">{stage.icon}</text>
                </motion.svg>
            );
        default:
            return <div>{stage.icon}</div>;
    }
}

export default function SDLCExplorer() {
    const [language, setLanguage] = useState('en');
    const [activeStage, setActiveStage] = useState(sdlcStages[0]);
    const [sidebarOpen, setSidebarOpen] = useState(false); // for mobile
    const navigate = useNavigate();

    const currentStage = language === 'en'
        ? sdlcStages.find(stage => stage.id === activeStage.id)
        : sdlcStagesHindi.find(stage => stage.id === activeStage.id);

    return (
        <>
            {/* Language Toggle */}
            <div className="flex justify-end p-4 space-x-2">
                <button
                    onClick={() => setLanguage('en')}
                    className={`px-3 py-1 rounded-lg border font-semibold ${language === 'en'
                        ? 'bg-blue-500 text-white border-blue-500'
                        : 'bg-white text-gray-700 border-gray-300'
                        } transition`}
                >
                    EN
                </button>

                <button
                    onClick={() => setLanguage('hi')}
                    className={`px-3 py-1 rounded-lg border font-semibold ${language === 'hi'
                        ? 'bg-blue-500 text-white border-blue-500'
                        : 'bg-white text-gray-700 border-gray-300'
                        } transition`}
                >
                    рд╣рд┐рдВ
                </button>
            </div>

            {/* Home Button */}
            <div className="flex justify-center mb-6 -mt-6">
                <Link
                    to="/parts/prt2"
                    className="inline-flex items-center px-4 py-2 bg-white rounded-full shadow-md border border-gray-200 hover:bg-gray-100 transition"
                >
                    <motion.div
                        className="mr-2"
                        animate={{ y: [0, -6, 0] }}
                        transition={{ repeat: Infinity, duration: 1, ease: "easeInOut" }}
                    >
                        <FaHome className="text-lg text-indigo-600" />
                    </motion.div>
                    Home
                </Link>
            </div>

            {/* Title */}
            <motion.h1
                initial={{ y: -30, opacity: 0 }}
                animate={{ y: 0, opacity: 1 }}
                transition={{ type: "spring", stiffness: 120 }}
                className="text-4xl font-extrabold text-center text-purple-700 mb-2"
            >
                ЁЯЪЧ SDLC : Software Development Lifecycle
            </motion.h1>

            {/* Main Container */}
            <div className="flex flex-col md:flex-row font-sans bg-gray-100 w-full max-w-6xl mx-auto my-8 shadow-2xl rounded-2xl overflow-hidden min-h-[700px]">

                {/* Sidebar Toggle Button (mobile) */}
                <div className="md:hidden flex justify-end p-4">
                    <button
                        onClick={() => setSidebarOpen(!sidebarOpen)}
                        className="px-3 py-2 bg-purple-500 text-white rounded-lg shadow"
                    >
                        {sidebarOpen ? 'Close Menu' : 'Open Menu'}
                    </button>
                </div>

                {/* Sidebar */}
                <aside className={`bg-white p-6 border-r border-gray-200 md:w-1/3 w-full md:block ${sidebarOpen ? 'block' : 'hidden'} md:relative absolute z-50 top-0 left-0 h-full md:h-auto`}>
                    <h2 className="text-2xl font-bold text-gray-800 mb-2">
                        {language === 'en' ? 'The SDLC' : 'SDLC рдЪрд░рдг'}
                    </h2>
                    <p className="text-gray-500 mb-6">
                        {language === 'en' ? 'Click a stage to learn more.' : 'рдЕрдзрд┐рдХ рдЬрд╛рдирдиреЗ рдХреЗ рд▓рд┐рдП рдХрд┐рд╕реА рдЪрд░рдг рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред'}
                    </p>
                    <nav className="space-y-2">
                        {sdlcStages.map(stage => {
                            const stageName = language === 'en'
                                ? stage.name
                                : sdlcStagesHindi.find(s => s.id === stage.id).name;

                            return (
                                <motion.button
                                    key={stage.id}
                                    onClick={() => {
                                        setActiveStage(stage);
                                        setSidebarOpen(false); // close sidebar on mobile
                                    }}
                                    className="w-full flex items-center text-left p-3 rounded-lg transition-all duration-300 focus:outline-none focus-visible:ring-2"
                                    style={{ color: activeStage.id === stage.id ? 'white' : '#374151' }}
                                    animate={{
                                        backgroundColor: activeStage.id === stage.id ? stage.color : 'rgba(243,244,246,0)',
                                        boxShadow: activeStage.id === stage.id ? `0 4px 14px 0 ${stage.color}55` : 'none'
                                    }}
                                    whileHover={{
                                        backgroundColor: activeStage.id !== stage.id ? '#f3f4f6' : stage.color,
                                        scale: 1.03
                                    }}
                                    whileTap={{ scale: 0.98 }}
                                >
                                    <motion.div
                                        className="text-2xl w-10 h-10 flex items-center justify-center rounded-full mr-4"
                                        animate={{
                                            backgroundColor: activeStage.id === stage.id ? 'rgba(255,255,255,0.2)' : '#e5e7eb',
                                            color: activeStage.id === stage.id ? 'white' : stage.color
                                        }}
                                    >
                                        {stage.icon}
                                    </motion.div>
                                    <span className="font-semibold">{stageName}</span>
                                </motion.button>
                            );
                        })}
                    </nav>
                </aside>

                {/* Main Content */}
                <main className="md:w-2/3 w-full p-6 md:p-10 bg-purple-100">
                    <AnimatePresence mode="wait">
                        <motion.div
                            key={activeStage.id}
                            variants={contentVariants}
                            initial="hidden"
                            animate="visible"
                            exit="exit"
                            className="flex flex-col h-full"
                        >
                            <header className="flex flex-col md:flex-row items-center mb-6 text-center md:text-left">
                                {/* SVG */}
                                <div
                                    className="p-4 rounded-xl shadow-md flex items-center justify-center mb-4 md:mb-0"
                                    style={{ backgroundColor: activeStage.color, color: 'white' }}
                                >
                                    <AnimatedSVG stage={activeStage} />
                                </div>

                                {/* Title */}
                                <h1 className="text-4xl font-extrabold text-gray-800 md:ml-5">
                                    {currentStage.name}
                                </h1>
                            </header>

                            <div className="space-y-6 text-gray-600 leading-relaxed">
                                <section>
                                    <h3 className="text-lg font-bold mb-2" style={{ color: activeStage.color }}>What Happens Here?</h3>
                                    <p>{currentStage.description}</p>
                                </section>

                                <section>
                                    <div className="bg-white border-l-4 rounded-r-lg p-5" style={{ borderColor: activeStage.color }}>
                                        <h3 className="text-lg font-bold mb-2 flex items-center" style={{ color: activeStage.color }}>{currentStage.analogy.title}</h3>
                                        <p className="text-sm">{currentStage.analogy.text}</p>
                                    </div>
                                </section>

                                <section>
                                    <h3 className="text-lg font-bold mb-2 flex items-center" style={{ color: activeStage.color }}>Practical Example</h3>
                                    <p>{currentStage.example}</p>
                                </section>
                            </div>
                        </motion.div>
                    </AnimatePresence>
                </main>
            </div>

            {/* Page Navigation */}
            <div className="flex flex-col md:flex-row justify-between items-center -mt-8 p-6 bg-gray-100 rounded-lg shadow-md gap-4 md:gap-0">
                {/* Previous Button */}
                <button
                    onClick={() => {
                        if (activeStage.id === 0) {
                            // At first stage тЖТ navigate to external path
                            navigate('/module2/developer-role');
                        } else {
                            // Go to previous stage
                            const prevStage = sdlcStages.find(stage => stage.id === activeStage.id - 1);
                            setActiveStage(prevStage);
                        }
                    }}
                    className="flex items-center gap-2 px-4 py-2 bg-purple-200 hover:bg-purple-300 text-purple-900 rounded-lg shadow transition"
                >
                    <FaArrowLeft />
                    Previous
                </button>

                {/* Next Button */}
                <button
                    onClick={() => {
                        if (activeStage.id === sdlcStages.length - 1) {
                            navigate('/module2/programming-languages');
                        } else {

                            const nextStage = sdlcStages.find(stage => stage.id === activeStage.id + 1);
                            setActiveStage(nextStage);
                        }
                    }}
                    className="flex items-center gap-2 px-4 py-2 bg-green-200 hover:bg-green-300 text-green-900 rounded-lg shadow transition"
                >
                    Next
                    <FaArrowRight />
                </button>

            </div>

        </>
    );
}

