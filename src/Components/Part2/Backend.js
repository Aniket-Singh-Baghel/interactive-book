import React, { useState, useEffect, useCallback } from "react";
import { motion } from "framer-motion";
import { FaHome, FaArrowLeft, FaArrowRight, FaServer, FaDatabase, FaCode, FaUserShield, FaBrain } from "react-icons/fa";
import { Link, useNavigate } from 'react-router-dom';

const content = {
  en: {
    home: "Home",
    title: "Backend Development: The Digital Brain ЁЯза",
    subtitle: "Explore the powerful server-side that handles data, security, and the logic that makes applications work seamlessly.",
    main_analogy_title: "The Restaurant Kitchen Analogy",
    main_analogy_desc: "A web application is like a restaurant. The frontend is the dining area where you enjoy your meal. The backend is the bustling kitchen where chefs (servers) prepare food (process data) using ingredients from a well-stocked pantry (database).",
    server_title: "The Server: The Master Chef",
    server_desc: "The server acts as the head chef, orchestrating the entire kitchen. It takes orders (requests), manages the cooking process, and ensures every dish (response) is perfect.",
    database_title: "The Database: The Pantry",
    database_desc: "The database is a vast, organized pantry. It stores every ingredient (data) imaginable, from user profiles to content, all neatly labeled and ready for the chef.",
    api_title: "The API: The Waiter",
    api_desc: "The API is the diligent waiter, shuttling orders between the dining room (frontend) and the kitchen (backend). It's the vital communication link that ensures you get what you asked for.",
    auth_title: "Authentication & Authorization",
    auth_desc: "This is like the restaurant's security. Authentication is checking your ID at the door to see who you are. Authorization is checking the guest list to see what areas you're allowed to access.",
    clarification_title: "Frontend vs. Backend vs. Database",
    clarification_frontend: "<strong>Frontend:</strong> What you see and interact with (the dining area). It's all about the user experience, design, and presentation.",
    clarification_backend: "<strong>Backend:</strong> The hidden engine (the kitchen). It handles the logic, calculations, and data management that you don't see.",
    clarification_database: "<strong>Database:</strong> The organized storage (the pantry). It's where all the application's data is kept securely.",
    live_example_title: "Live Backend Example: User Login",
    live_example_desc: "Enter a username below to see how the backend 'authenticates' a user. This is a simplified simulation.",
    live_example_button: "Login",
    live_example_loading: "Checking credentials...",
    live_example_success: "Welcome, ",
    live_example_error: "User not found. Try 'admin' or 'guest'.",
    previous: "previous",
    next: "Next",
  },
  hi: {
    home: "рд╣реЛрдо",
    title: "рдмреИрдХрдПрдВрдб рдбреЗрд╡рд▓рдкрдореЗрдВрдЯ: рдбрд┐рдЬрд┐рдЯрд▓ рдорд╕реНрддрд┐рд╖реНрдХ ЁЯза",
    subtitle: "рд╢рдХреНрддрд┐рд╢рд╛рд▓реА рд╕рд░реНрд╡рд░-рд╕рд╛рдЗрдб рдХрд╛ рдЕрдиреНрд╡реЗрд╖рдг рдХрд░реЗрдВ рдЬреЛ рдбреЗрдЯрд╛, рд╕реБрд░рдХреНрд╖рд╛ рдФрд░ рдЙрд╕ рддрд░реНрдХ рдХреЛ рд╕рдВрднрд╛рд▓рддрд╛ рд╣реИ рдЬреЛ рдЕрдиреБрдкреНрд░рдпреЛрдЧреЛрдВ рдХреЛ рд╕рд╣рдЬрддрд╛ рд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИред",
    main_analogy_title: "рд░реЗрд╕реНрдЯреЛрд░реЗрдВрдЯ рдХреА рд░рд╕реЛрдИ рдХреА рдЙрдкрдорд╛",
    main_analogy_desc: "рдПрдХ рд╡реЗрдм рдПрдкреНрд▓рд┐рдХреЗрд╢рди рдПрдХ рд░реЗрд╕реНрдЯреЛрд░реЗрдВрдЯ рдХреА рддрд░рд╣ рд╣реИред рдлреНрд░рдВрдЯрдПрдВрдб рдбрд╛рдЗрдирд┐рдВрдЧ рдПрд░рд┐рдпрд╛ рд╣реИ рдЬрд╣рд╛рдБ рдЖрдк рдЕрдкрдиреЗ рднреЛрдЬрди рдХрд╛ рдЖрдирдВрдж рд▓реЗрддреЗ рд╣реИрдВред рдмреИрдХрдПрдВрдб рд╡реНрдпрд╕реНрдд рд░рд╕реЛрдИ рд╣реИ рдЬрд╣рд╛рдБ рд╢реЗрдл (рд╕рд░реНрд╡рд░) рдПрдХ рдЕрдЪреНрдЫреА рддрд░рд╣ рд╕реЗ рд╕реНрдЯреЙрдХ рдХреА рдЧрдИ рдкреЗрдВрдЯреНрд░реА (рдбреЗрдЯрд╛рдмреЗрд╕) рд╕реЗ рд╕рд╛рдордЧреНрд░реА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рднреЛрдЬрди (рдбреЗрдЯрд╛ рдкреНрд░реЛрд╕реЗрд╕) рддреИрдпрд╛рд░ рдХрд░рддреЗ рд╣реИрдВред",
    server_title: "рд╕рд░реНрд╡рд░: рдорд╛рд╕реНрдЯрд░ рд╢реЗрдл",
    server_desc: "рд╕рд░реНрд╡рд░ рд╣реЗрдб рд╢реЗрдл рдХреЗ рд░реВрдк рдореЗрдВ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ, рдЬреЛ рдкреВрд░реА рд░рд╕реЛрдИ рдХрд╛ рд╕рдВрдЪрд╛рд▓рди рдХрд░рддрд╛ рд╣реИред рдпрд╣ рдСрд░реНрдбрд░ (рдЕрдиреБрд░реЛрдз) рд▓реЗрддрд╛ рд╣реИ, рдЦрд╛рдирд╛ рдкрдХрд╛рдиреЗ рдХреА рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдХрд╛ рдкреНрд░рдмрдВрдзрди рдХрд░рддрд╛ рд╣реИ, рдФрд░ рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддрд╛ рд╣реИ рдХрд┐ рд╣рд░ рд╡реНрдпрдВрдЬрди (рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛) рдПрдХрджрдо рд╕рд╣реА рд╣реЛред",
    database_title: "рдбреЗрдЯрд╛рдмреЗрд╕: рдкреИрдВрдЯреНрд░реА",
    database_desc: "рдбреЗрдЯрд╛рдмреЗрд╕ рдПрдХ рд╡рд┐рд╢рд╛рд▓, рд╕рдВрдЧрдард┐рдд рдкреЗрдВрдЯреНрд░реА рд╣реИред рдпрд╣ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдкреНрд░реЛрдлрд╛рдЗрд▓ рд╕реЗ рд▓реЗрдХрд░ рд╕рд╛рдордЧреНрд░реА рддрдХ, рд╣рд░ рдХрд▓реНрдкрдиреАрдп рдШрдЯрдХ (рдбреЗрдЯрд╛) рдХреЛ рд╕рдВрдЧреНрд░рд╣реАрдд рдХрд░рддрд╛ рд╣реИ, рд╕рднреА рдмрдбрд╝реЗ рдХрд░реАрдиреЗ рд╕реЗ рд▓реЗрдмрд▓ рдХрд┐рдП рдЧрдП рдФрд░ рд╢реЗрдл рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реИрдВред",
    api_title: "рдПрдкреАрдЖрдИ: рд╡реЗрдЯрд░",
    api_desc: "рдПрдкреАрдЖрдИ рдореЗрд╣рдирддреА рд╡реЗрдЯрд░ рд╣реИ, рдЬреЛ рдбрд╛рдЗрдирд┐рдВрдЧ рд░реВрдо (рдлреНрд░рдВрдЯрдПрдВрдб) рдФрд░ рдХрд┐рдЪрди (рдмреИрдХрдПрдВрдб) рдХреЗ рдмреАрдЪ рдСрд░реНрдбрд░ рднреЗрдЬрддрд╛ рд╣реИред рдпрд╣ рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╕рдВрдЪрд╛рд░ рд▓рд┐рдВрдХ рд╣реИ рдЬреЛ рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддрд╛ рд╣реИ рдХрд┐ рдЖрдкрдХреЛ рд╡рд╣реА рдорд┐рд▓реЗ рдЬреЛ рдЖрдкрдиреЗ рдорд╛рдВрдЧрд╛ рдерд╛ред",
    auth_title: "рдкреНрд░рдорд╛рдгреАрдХрд░рдг рдФрд░ рдкреНрд░рд╛рдзрд┐рдХрд░рдг",
    auth_desc: "рдпрд╣ рд░реЗрд╕реНрдЯреЛрд░реЗрдВрдЯ рдХреА рд╕реБрд░рдХреНрд╖рд╛ рдХреА рддрд░рд╣ рд╣реИред рдкреНрд░рдорд╛рдгреАрдХрд░рдг рдпрд╣ рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП рджрд░рд╡рд╛рдЬреЗ рдкрд░ рдЖрдкрдХреА рдЖрдИрдбреА рдХреА рдЬрд╛рдБрдЪ рдХрд░ рд░рд╣рд╛ рд╣реИ рдХрд┐ рдЖрдк рдХреМрди рд╣реИрдВред рдкреНрд░рд╛рдзрд┐рдХрд░рдг рдпрд╣ рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдЕрддрд┐рдерд┐ рд╕реВрдЪреА рдХреА рдЬрд╛рдБрдЪ рдХрд░ рд░рд╣рд╛ рд╣реИ рдХрд┐ рдЖрдкрдХреЛ рдХрд┐рди рдХреНрд╖реЗрддреНрд░реЛрдВ рддрдХ рдкрд╣реБрдБрдЪрдиреЗ рдХреА рдЕрдиреБрдорддрд┐ рд╣реИред",
    clarification_title: "рдлреНрд░рдВрдЯрдПрдВрдб рдмрдирд╛рдо рдмреИрдХрдПрдВрдб рдмрдирд╛рдо рдбреЗрдЯрд╛рдмреЗрд╕",
    clarification_frontend: "<strong>рдлреНрд░рдВрдЯрдПрдВрдб:</strong> рдЬреЛ рдЖрдк рджреЗрдЦрддреЗ рд╣реИрдВ рдФрд░ рдЬрд┐рд╕рдХреЗ рд╕рд╛рде рдЗрдВрдЯрд░реИрдХреНрдЯ рдХрд░рддреЗ рд╣реИрдВ (рдбрд╛рдЗрдирд┐рдВрдЧ рдПрд░рд┐рдпрд╛)ред рдпрд╣ рд╕рдм рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЕрдиреБрднрд╡, рдбрд┐рдЬрд╛рдЗрди рдФрд░ рдкреНрд░рд╕реНрддреБрддрд┐ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╣реИред",
    clarification_backend: "<strong>рдмреИрдХрдПрдВрдб:</strong> рдЫрд┐рдкрд╛ рд╣реБрдЖ рдЗрдВрдЬрди (рд░рд╕реЛрдИ)ред рдпрд╣ рдЙрд╕ рддрд░реНрдХ, рдЧрдгрдирд╛ рдФрд░ рдбреЗрдЯрд╛ рдкреНрд░рдмрдВрдзрди рдХреЛ рд╕рдВрднрд╛рд▓рддрд╛ рд╣реИ рдЬрд┐рд╕реЗ рдЖрдк рдирд╣реАрдВ рджреЗрдЦрддреЗ рд╣реИрдВред",
    clarification_database: "<strong>рдбреЗрдЯрд╛рдмреЗрд╕:</strong> рд╕рдВрдЧрдард┐рдд рднрдВрдбрд╛рд░рдг (рдкреЗрдВрдЯреНрд░реА)ред рдпрд╣реАрдВ рдкрд░ рдПрдкреНрд▓рд┐рдХреЗрд╢рди рдХрд╛ рд╕рд╛рд░рд╛ рдбреЗрдЯрд╛ рд╕реБрд░рдХреНрд╖рд┐рдд рд░реВрдк рд╕реЗ рд░рдЦрд╛ рдЬрд╛рддрд╛ рд╣реИред",
    live_example_title: "рд▓рд╛рдЗрд╡ рдмреИрдХрдПрдВрдб рдЙрджрд╛рд╣рд░рдг: рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рд▓реЙрдЧрд┐рди",
    live_example_desc: "рдпрд╣ рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рдПрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ рдХрд┐ рдмреИрдХрдПрдВрдб рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдХреИрд╕реЗ 'рдкреНрд░рдорд╛рдгрд┐рдд' рдХрд░рддрд╛ рд╣реИред рдпрд╣ рдПрдХ рд╕рд░рд▓реАрдХреГрдд рд╕рд┐рдореБрд▓реЗрд╢рди рд╣реИред",
    live_example_button: "рд▓реЙрдЧ рдЗрди рдХрд░реЗрдВ",
    live_example_loading: "рдХреНрд░реЗрдбреЗрдВрд╢рд┐рдпрд▓реНрд╕ рдХреА рдЬрд╛рдБрдЪ рд╣реЛ рд░рд╣реА рд╣реИ...",
    live_example_success: "рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ, ",
    live_example_error: "рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╣реАрдВ рдорд┐рд▓рд╛ред 'admin' рдпрд╛ 'guest' рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
    previous: "рдкрд┐рдЫрд▓рд╛",
    next: "рдЕрдЧрд▓рд╛",
  }
};

const Card = ({ icon, title, description, children }) => (
  <motion.div
    initial={{ opacity: 0, y: 30 }}
    whileInView={{ opacity: 1, y: 0 }}
    viewport={{ once: true, amount: 0.5 }}
    transition={{ duration: 0.6, ease: "easeOut" }}
    className="bg-white p-6 rounded-xl shadow-lg border border-gray-200 hover:shadow-pink-100 transition-all duration-300"
  >
    <div className="flex items-center mb-4">
      <div className="p-3 bg-pink-100 text-pink-500 rounded-full mr-4">
        {icon}
      </div>
      <h3 className="text-xl font-bold text-gray-800">{title}</h3>
    </div>
    <p className="text-gray-600" dangerouslySetInnerHTML={{ __html: description }} />
    {children}
  </motion.div>
);

const BackendDevelopment = () => {
  const [lang, setLang] = useState('en');
  const [username, setUsername] = useState('');
  const [loginStatus, setLoginStatus] = useState('');
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const t = content[lang];

  useEffect(() => {
    const handleKeyDown = (event) => {
      if (event.ctrlKey && event.key === 'k') {
        event.preventDefault();
        setLang(prevLang => prevLang === 'en' ? 'hi' : 'en');
      }
    };
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, []);

  const handleLogin = useCallback(() => {
    setLoading(true);
    setLoginStatus('');
    setTimeout(() => {
      if (username.toLowerCase() === 'admin' || username.toLowerCase() === 'guest') {
        setLoginStatus(`${t.live_example_success}${username}!`);
      } else {
        setLoginStatus(t.live_example_error);
      }
      setLoading(false);
    }, 1500);
  }, [username, t]);

  return (
    <div className="p-4 sm:p-6 lg:p-8 min-h-screen bg-pink-50 text-gray-800 font-sans">
      <div className="max-w-5xl mx-auto">
        <div className="flex items-center justify-between mb-12">
          <Link to="/parts/prt2" className="inline-flex items-center px-4 py-2 bg-white rounded-full shadow-md border border-gray-200 hover:bg-gray-100 transition">
            <FaHome className="mr-2 text-lg text-pink-500" />
            {t.home}
          </Link>
          <div className="flex space-x-2">
            <button onClick={() => setLang("en")} className={`px-3 py-1 rounded-lg border font-semibold ${lang === "en" ? "bg-pink-500 text-white border-pink-500" : "bg-white text-gray-700 border-gray-300"} transition`}>EN</button>
            <button onClick={() => setLang("hi")} className={`px-3 py-1 rounded-lg border font-semibold ${lang === "hi" ? "bg-pink-500 text-white border-pink-500" : "bg-white text-gray-700 border-gray-300"} transition`}>рд╣рд┐рдВ</button>
          </div>
        </div>

        <div className="text-center mb-12">
          <motion.h1
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-4xl sm:text-5xl lg:text-6xl font-extrabold text-gray-900 mb-3"
          >
            {t.title}
          </motion.h1>
          <p className="text-gray-600 max-w-2xl mx-auto">
            {t.subtitle}
          </p>
        </div>

        <div className="grid md:grid-cols-3 gap-8 mb-12">
          <Card icon={<FaServer size={22} />} title={t.server_title} description={t.server_desc} />
          <Card icon={<FaDatabase size={22} />} title={t.database_title} description={t.database_desc} />
          <Card icon={<FaCode size={22} />} title={t.api_title} description={t.api_desc} />
        </div>

        <div className="grid md:grid-cols-1 gap-8 mb-12">
          <Card icon={<FaUserShield size={22} />} title={t.auth_title} description={t.auth_desc} />
        </div>

        <Card icon={<FaBrain size={22} />} title={t.clarification_title}>
          <div className="mt-4 space-y-4">
            <p className="text-gray-600" dangerouslySetInnerHTML={{ __html: t.clarification_frontend }} />
            <p className="text-gray-600" dangerouslySetInnerHTML={{ __html: t.clarification_backend }} />
            <p className="text-gray-600" dangerouslySetInnerHTML={{ __html: t.clarification_database }} />
          </div>
        </Card>

        <div className="mt-12">
          <Card icon={<FaCode size={22} />} title={t.live_example_title} description={t.live_example_desc}>
            <div className="mt-4 flex flex-col sm:flex-row gap-4 items-center">
              <input
                type="text"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                placeholder="Enter username"
                className="w-full sm:w-auto flex-grow bg-gray-100 border border-gray-300 rounded-lg px-4 py-2 text-gray-800 focus:outline-none focus:ring-2 focus:ring-pink-400"
              />
              <motion.button
                onClick={handleLogin}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className="w-full sm:w-auto px-6 py-2 bg-pink-500 text-white font-bold rounded-lg shadow-lg hover:bg-pink-600 transition"
                disabled={loading}
              >
                {loading ? t.live_example_loading : t.live_example_button}
              </motion.button>
            </div>
            {loginStatus && (
              <motion.p
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className={`mt-4 text-center font-semibold ${loginStatus.includes(t.live_example_success) ? 'text-green-600' : 'text-red-600'}`}
              >
                {loginStatus}
              </motion.p>
            )}
          </Card>
        </div>


        <div className="w-full flex justify-between items-center mt-12 p-4 bg-white rounded-lg shadow-md border border-gray-200">
          <button
            onClick={() => navigate('/module3/frontend')}
            className="flex items-center gap-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 text-pink-600 rounded-lg shadow transition"
          >
            <FaArrowLeft />
            {t.previous}
          </button>
          <button
            onClick={() => navigate('/module3/databases')}
            className="flex items-center gap-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 text-pink-600 rounded-lg shadow transition"
          >
            {t.next}
            <FaArrowRight />
          </button>
        </div>
      </div>
    </div>
  );
};

export default BackendDevelopment;
