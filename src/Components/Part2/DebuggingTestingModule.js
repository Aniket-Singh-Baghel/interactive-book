import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import {FaCheckCircle, FaTimesCircle, FaPlay, FaArrowLeft, FaArrowRight, FaHome } from "react-icons/fa";
import { Link, useNavigate } from 'react-router-dom';

const content = {
  en: {
    home: "Home",
    title: "Testing & Debugging üêû",
    subtitle: "Ensuring your code is reliable, bug-free, and ready for the world.",
    
    testing_title: "What is Testing?",
    testing_desc: "<em>Testing</em> is the process of <strong>verifying that a software application does what it is supposed to do</strong>. It's like checking your homework before submitting it to the teacher. You want to find any mistakes before anyone else does.",
    testing_analogy_title: "The Car Factory Analogy",
    testing_analogy: "Imagine a car factory. Before a car is sold, it goes through a series of tests: the engine is checked, the brakes are tested, and the lights are inspected. This is to ensure the car is safe and works correctly. Software testing is the same; it's a quality control process.",

    debugging_title: "What is Debugging?",
    debugging_desc: "<em>Debugging</em> is the process of <strong>finding and fixing errors (bugs) in the source code</strong> of a program. This happens <em>after</em> a test has failed or a bug has been reported. It's the detective work of software development.",
    debugging_analogy_title: "The Detective Analogy",
    debugging_analogy: "If testing is like knowing a crime has been committed, debugging is the detective's job to find out who did it, how, and why. A debugger is a special tool that helps developers inspect the code step-by-step to find the root cause of the problem.",

    testing_types_title: "Types of Software Testing",
    testing_types: [
      {
        name: "Unit Testing",
        description: "Testing individual components or functions in isolation. It's like checking each ingredient before you cook.",
        example: "A test that checks if a `sum(2, 3)` function correctly returns `5`."
      },
      {
        name: "Integration Testing",
        description: "Testing how multiple components work together. It's like making sure the engine and wheels of a car work together.",
        example: "A test that checks if logging in (authentication) correctly shows the user's dashboard (UI)."
      },
      {
        name: "End-to-End (E2E) Testing",
        description: "Testing the entire application flow from start to finish, simulating a real user's journey.",
        example: "A test that simulates a user signing up, adding an item to the cart, and checking out."
      }
    ],

    distinction_title: "Testing vs. Debugging: Key Differences",
    distinction: [
      {
        aspect: "Goal",
        testing: "To find defects and bugs.",
        debugging: "To fix the defects found."
      },
      {
        aspect: "Timing",
        testing: "Planned and scheduled before release.",
        debugging: "Unplanned, happens when a bug is found."
      },
      {
        aspect: "Process",
        testing: "Can be automated or manual.",
        debugging: "Mostly a manual process."
      },
      {
        aspect: "Who does it?",
        testing: "Often done by a dedicated testing team.",
        debugging: "Done by the developer who wrote the code."
      }
    ],

    interactive_title: "Live Simulation: Spot the Bug!",
    interactive_desc: "Here is a simple function that is supposed to add two numbers. But there's a bug! Can you spot it? Run the tests to see what happens.",
    code_snippet: `function add(a, b) {
  return a - b; // Oops! This should be addition.
}`,
    run_tests_button: "Run Tests",
    test_results_title: "Test Results",
    test_case_1: "Test Case 1: 2 + 3 = 5",
    test_case_2: "Test Case 2: 10 + 5 = 15",

    ui_testing_title: "UI Testing Simulation",
    ui_testing_desc: "Check if the button's color changes on click.",
    ui_button_text: "Click Me",
    ui_test_button: "Test UI",
    ui_test_result: "Button color changed successfully!",

    edge_case_title: "Edge Case Testing",
    edge_case_desc: "Test how the system handles unexpected or extreme inputs. Enter a username to test.",
    edge_case_input_placeholder: "Enter username",
    edge_case_test_button: "Test Username",

    detective_animation_title: "Interactive Detective: The Case of the Missing Clue",
    detective_animation_desc: "Become a code detective! Below is an animated scene. Your mission, should you choose to accept it, is to find the hidden clues within the code. Each clue represents a 'bug' or an 'issue' that you need to solve. Pay close attention to the details and see if you can spot all the anomalies.",
    detective_animation_tip: "Hover over different elements in the scene to uncover hidden messages and clues. Click on the bugs to 'squash' them!",
    
    previous: "Previous",
    next: "Next",
  },
  hi: {
    home: "‡§π‡•ã‡§Æ",
    title: "‡§ü‡•á‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§î‡§∞ ‡§°‡•Ä‡§¨‡§ó‡§ø‡§Ç‡§ó üêû",
    subtitle: "‡§Ø‡§π ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§®‡§æ ‡§ï‡§ø ‡§Ü‡§™‡§ï‡§æ ‡§ï‡•ã‡§° ‡§µ‡§ø‡§∂‡•ç‡§µ‡§∏‡§®‡•Ä‡§Ø, ‡§¨‡§ó-‡§Æ‡•Å‡§ï‡•ç‡§§ ‡§î‡§∞ ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à‡•§",

    testing_title: "‡§ü‡•á‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
    testing_desc: "<em>‡§ü‡•á‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó</em> ‡§Ø‡§π <strong>‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§π‡•à ‡§ï‡§ø ‡§è‡§ï ‡§∏‡•â‡§´‡•ç‡§ü‡§µ‡•á‡§Ø‡§∞ ‡§è‡§™‡•ç‡§≤‡§ø‡§ï‡•á‡§∂‡§® ‡§µ‡§π‡•Ä ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ú‡•ã ‡§â‡§∏‡•á ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è</strong>‡•§ ‡§Ø‡§π ‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§ï‡•ã ‡§Ö‡§™‡§®‡§æ ‡§π‡•ã‡§Æ‡§µ‡§∞‡•ç‡§ï ‡§ú‡§Æ‡§æ ‡§ï‡§∞‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§â‡§∏‡§ï‡•Ä ‡§ú‡§æ‡§Å‡§ö ‡§ï‡§∞‡§®‡•á ‡§ú‡•à‡§∏‡§æ ‡§π‡•à‡•§ ‡§Ü‡§™ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç ‡§ï‡§ø ‡§ï‡•ã‡§à ‡§î‡§∞ ‡§ó‡§≤‡§§‡•Ä ‡§ñ‡•ã‡§ú‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§Ü‡§™ ‡§ñ‡•Å‡§¶ ‡§π‡•Ä ‡§ó‡§≤‡§§‡§ø‡§Ø‡§æ‡§Å ‡§ñ‡•ã‡§ú ‡§≤‡•á‡§Ç‡•§",
    testing_analogy_title: "‡§ï‡§æ‡§∞ ‡§´‡•à‡§ï‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§ï‡§æ ‡§∏‡§æ‡§¶‡•É‡§∂‡•ç‡§Ø",
    testing_analogy: "‡§è‡§ï ‡§ï‡§æ‡§∞ ‡§´‡•à‡§ï‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§ï‡•Ä ‡§ï‡§≤‡•ç‡§™‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§ï‡§æ‡§∞ ‡§¨‡•á‡§ö‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á, ‡§Ø‡§π ‡§ï‡§à ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§∏‡•á ‡§ó‡•Å‡§ú‡§∞‡§§‡•Ä ‡§π‡•à: ‡§á‡§Ç‡§ú‡§® ‡§ï‡•Ä ‡§ú‡§æ‡§Å‡§ö ‡§ï‡•Ä ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à, ‡§¨‡•ç‡§∞‡•á‡§ï ‡§ï‡§æ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à, ‡§î‡§∞ ‡§≤‡§æ‡§á‡§ü ‡§ï‡§æ ‡§®‡§ø‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§ ‡§Ø‡§π ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à ‡§ï‡§ø ‡§ï‡§æ‡§∞ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§π‡•à ‡§î‡§∞ ‡§∏‡§π‡•Ä ‡§§‡§∞‡•Ä‡§ï‡•á ‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à‡•§ ‡§∏‡•â‡§´‡•ç‡§ü‡§µ‡•á‡§Ø‡§∞ ‡§ü‡•á‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§≠‡•Ä ‡§Ø‡§π‡•Ä ‡§π‡•à; ‡§Ø‡§π ‡§è‡§ï ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£ ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§π‡•à‡•§",

    debugging_title: "‡§°‡•Ä‡§¨‡§ó‡§ø‡§Ç‡§ó ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
    debugging_desc: "<em>‡§°‡•Ä‡§¨‡§ó‡§ø‡§Ç‡§ó</em> ‡§è‡§ï ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§ï‡•á <strong>‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§ï‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡§Ø‡•ã‡§Ç (‡§¨‡§ó) ‡§ï‡•ã ‡§ñ‡•ã‡§ú‡§®‡•á ‡§î‡§∞ ‡§†‡•Ä‡§ï ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§π‡•à</strong>‡•§ ‡§Ø‡§π ‡§§‡§¨ ‡§π‡•ã‡§§‡§æ ‡§π‡•à ‡§ú‡§¨ ‡§ï‡•ã‡§à ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§µ‡§ø‡§´‡§≤ ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à ‡§Ø‡§æ ‡§ï‡•ã‡§à ‡§¨‡§ó ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§ ‡§Ø‡§π ‡§∏‡•â‡§´‡•ç‡§ü‡§µ‡•á‡§Ø‡§∞ ‡§°‡•á‡§µ‡§≤‡§™‡§Æ‡•á‡§Ç‡§ü ‡§ï‡•Ä ‡§ú‡§æ‡§∏‡•Ç‡§∏‡•Ä ‡§ï‡§æ ‡§ï‡§æ‡§Æ ‡§π‡•à‡•§",
    debugging_analogy_title: "‡§ú‡§æ‡§∏‡•Ç‡§∏ ‡§ï‡§æ ‡§∏‡§æ‡§¶‡•É‡§∂‡•ç‡§Ø",
    debugging_analogy: "‡§Ö‡§ó‡§∞ ‡§ü‡•á‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§Ø‡§π ‡§ú‡§æ‡§®‡§®‡•á ‡§ú‡•à‡§∏‡§æ ‡§π‡•à ‡§ï‡§ø ‡§ï‡•ã‡§à ‡§Ö‡§™‡§∞‡§æ‡§ß ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à, ‡§§‡•ã ‡§°‡•Ä‡§¨‡§ó‡§ø‡§Ç‡§ó ‡§ú‡§æ‡§∏‡•Ç‡§∏ ‡§ï‡§æ ‡§ï‡§æ‡§Æ ‡§π‡•à ‡§ï‡§ø ‡§Ø‡§π ‡§™‡§§‡§æ ‡§≤‡§ó‡§æ‡§è ‡§ï‡§ø ‡§Ø‡§π ‡§ï‡§ø‡§∏‡§®‡•á, ‡§ï‡•à‡§∏‡•á ‡§î‡§∞ ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡§ø‡§Ø‡§æ‡•§ ‡§è‡§ï ‡§°‡•Ä‡§¨‡§ó‡§∞ ‡§è‡§ï ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§â‡§™‡§ï‡§∞‡§£ ‡§π‡•à ‡§ú‡•ã ‡§°‡•á‡§µ‡§≤‡§™‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§æ ‡§Æ‡•Ç‡§≤ ‡§ï‡§æ‡§∞‡§£ ‡§ñ‡•ã‡§ú‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§° ‡§ï‡§æ ‡§ö‡§∞‡§£-‡§¶‡§∞-‡§ö‡§∞‡§£ ‡§®‡§ø‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§",

    testing_types_title: "‡§∏‡•â‡§´‡•ç‡§ü‡§µ‡•á‡§Ø‡§∞ ‡§ü‡•á‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞",
    testing_types: [
      {
        name: "‡§Ø‡•Ç‡§®‡§ø‡§ü ‡§ü‡•á‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó",
        description: "‡§Ö‡§≤‡§ó-‡§Ö‡§≤‡§ó ‡§ò‡§ü‡§ï‡•ã‡§Ç ‡§Ø‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡§∞‡§®‡§æ‡•§ ‡§Ø‡§π ‡§ñ‡§æ‡§®‡§æ ‡§™‡§ï‡§æ‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§ï‡•Ä ‡§ú‡§æ‡§Å‡§ö ‡§ï‡§∞‡§®‡•á ‡§ú‡•à‡§∏‡§æ ‡§π‡•à‡•§",
        example: "‡§è‡§ï ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ú‡•ã ‡§Ø‡§π ‡§ú‡§æ‡§Å‡§ö‡§§‡§æ ‡§π‡•à ‡§ï‡§ø `sum(2, 3)` ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§® ‡§∏‡§π‡•Ä ‡§¢‡§Ç‡§ó ‡§∏‡•á `5` ‡§≤‡•å‡§ü‡§æ‡§§‡§æ ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç‡•§"
      },
      {
        name: "‡§á‡§Ç‡§ü‡•Ä‡§ó‡•ç‡§∞‡•á‡§∂‡§® ‡§ü‡•á‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó",
        description: "‡§Ø‡§π ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡§∞‡§®‡§æ ‡§ï‡§ø ‡§ï‡§à ‡§ò‡§ü‡§ï ‡§è‡§ï ‡§∏‡§æ‡§• ‡§ï‡•à‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§Ø‡§π ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ú‡•à‡§∏‡§æ ‡§π‡•à ‡§ï‡§ø ‡§ï‡§æ‡§∞ ‡§ï‡§æ ‡§á‡§Ç‡§ú‡§® ‡§î‡§∞ ‡§™‡§π‡§ø‡§è ‡§è‡§ï ‡§∏‡§æ‡§• ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§",
        example: "‡§è‡§ï ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ú‡•ã ‡§Ø‡§π ‡§ú‡§æ‡§Å‡§ö‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§≤‡•â‡§ó ‡§á‡§® ‡§ï‡§∞‡§®‡•á (‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡•Ä‡§ï‡§∞‡§£) ‡§∏‡•á ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° (UI) ‡§∏‡§π‡•Ä ‡§¢‡§Ç‡§ó ‡§∏‡•á ‡§¶‡§ø‡§ñ‡§æ‡§à ‡§¶‡•á‡§§‡§æ ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç‡•§"
      },
      {
        name: "‡§è‡§Ç‡§°-‡§ü‡•Ç-‡§è‡§Ç‡§° (E2E) ‡§ü‡•á‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó",
        description: "‡§è‡§ï ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§ï‡§∞‡§£ ‡§ï‡§∞‡§§‡•á ‡§π‡•Å‡§è, ‡§∂‡•Å‡§∞‡•Ç ‡§∏‡•á ‡§Ö‡§Ç‡§§ ‡§§‡§ï ‡§™‡•Ç‡§∞‡•á ‡§è‡§™‡•ç‡§≤‡§ø‡§ï‡•á‡§∂‡§® ‡§™‡•ç‡§∞‡§µ‡§æ‡§π ‡§ï‡§æ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡§∞‡§®‡§æ‡•§",
        example: "‡§è‡§ï ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ú‡•ã ‡§è‡§ï ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡•ã ‡§∏‡§æ‡§á‡§® ‡§Ö‡§™ ‡§ï‡§∞‡§®‡•á, ‡§ï‡§æ‡§∞‡•ç‡§ü ‡§Æ‡•á‡§Ç ‡§è‡§ï ‡§Ü‡§á‡§ü‡§Æ ‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§î‡§∞ ‡§ö‡•á‡§ï ‡§Ü‡§â‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§ï‡§∞‡§£ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"
      }
    ],

    distinction_title: "‡§ü‡•á‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§¨‡§®‡§æ‡§Æ ‡§°‡•Ä‡§¨‡§ó‡§ø‡§Ç‡§ó: ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Ö‡§Ç‡§§‡§∞",
    distinction: [
      {
        aspect: "‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø",
        testing: "‡§¶‡•ã‡§∑‡•ã‡§Ç ‡§î‡§∞ ‡§¨‡§ó‡•ã‡§Ç ‡§ï‡•ã ‡§ñ‡•ã‡§ú‡§®‡§æ‡•§",
        debugging: "‡§™‡§æ‡§è ‡§ó‡§è ‡§¶‡•ã‡§∑‡•ã‡§Ç ‡§ï‡•ã ‡§†‡•Ä‡§ï ‡§ï‡§∞‡§®‡§æ‡•§"
      },
      {
        aspect: "‡§∏‡§Æ‡§Ø",
        testing: "‡§∞‡§ø‡§≤‡•Ä‡§ú ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§Ø‡•ã‡§ú‡§®‡§æ‡§¨‡§¶‡•ç‡§ß ‡§î‡§∞ ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§‡•§",
        debugging: "‡§Ö‡§®‡§ø‡§Ø‡•ã‡§ú‡§ø‡§§, ‡§ú‡§¨ ‡§ï‡•ã‡§à ‡§¨‡§ó ‡§™‡§æ‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à ‡§§‡§¨ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§"
      },
      {
        aspect: "‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ",
        testing: "‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§Ø‡§æ ‡§Æ‡•à‡§®‡•Å‡§Ö‡§≤ ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§",
        debugging: "‡§Ö‡§ß‡§ø‡§ï‡§§‡§∞ ‡§è‡§ï ‡§Æ‡•à‡§®‡•Å‡§Ö‡§≤ ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡•§"
      },
      {
        aspect: "‡§ï‡•å‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•à?",
        testing: "‡§Ö‡§ï‡•ç‡§∏‡§∞ ‡§è‡§ï ‡§∏‡§Æ‡§∞‡•ç‡§™‡§ø‡§§ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ü‡•Ä‡§Æ ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§",
        debugging: "‡§â‡§∏ ‡§°‡•á‡§µ‡§≤‡§™‡§∞ ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à ‡§ú‡§ø‡§∏‡§®‡•á ‡§ï‡•ã‡§° ‡§≤‡§ø‡§ñ‡§æ ‡§π‡•à‡•§"
      }
    ],

    interactive_title: "‡§≤‡§æ‡§á‡§µ ‡§∏‡§ø‡§Æ‡•Å‡§≤‡•á‡§∂‡§®: ‡§¨‡§ó ‡§ï‡•ã ‡§™‡§π‡§ö‡§æ‡§®‡•á‡§Ç!",
    interactive_desc: "‡§Ø‡§π‡§æ‡§Å ‡§è‡§ï ‡§∏‡§∞‡§≤ ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§® ‡§π‡•à ‡§ú‡§ø‡§∏‡•á ‡§¶‡•ã ‡§®‡§Ç‡§¨‡§∞‡•ã‡§Ç ‡§ï‡•ã ‡§ú‡•ã‡§°‡§º‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§ ‡§≤‡•á‡§ï‡§ø‡§® ‡§á‡§∏‡§Æ‡•á‡§Ç ‡§è‡§ï ‡§¨‡§ó ‡§π‡•à! ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§á‡§∏‡•á ‡§™‡§π‡§ö‡§æ‡§® ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç? ‡§Ø‡§π ‡§¶‡•á‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ö‡§≤‡§æ‡§è‡§Å ‡§ï‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§",
    code_snippet: `function add(a, b) {
  return a - b; // ‡§Ö‡§∞‡•á! ‡§Ø‡§π ‡§ú‡•ã‡§°‡§º ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§
}`,
    run_tests_button: "‡§ü‡•á‡§∏‡•ç‡§ü ‡§ö‡§≤‡§æ‡§è‡§Å",
    test_results_title: "‡§ü‡•á‡§∏‡•ç‡§ü ‡§ï‡•á ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ",
    test_case_1: "‡§ü‡•á‡§∏‡•ç‡§ü ‡§ï‡•á‡§∏ 1: 2 + 3 = 5",
    test_case_2: "‡§ü‡•á‡§∏‡•ç‡§ü ‡§ï‡•á‡§∏ 2: 10 + 5 = 15",

    ui_testing_title: "‡§Ø‡•Ç‡§Ü‡§à ‡§ü‡•á‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§∏‡§ø‡§Æ‡•Å‡§≤‡•á‡§∂‡§®",
    ui_testing_desc: "‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç ‡§ï‡§ø ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ ‡§¨‡§ü‡§® ‡§ï‡§æ ‡§∞‡§Ç‡§ó ‡§¨‡§¶‡§≤‡§§‡§æ ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç‡•§",
    ui_button_text: "‡§Æ‡•Å‡§ù‡•á ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç",
    ui_test_button: "‡§Ø‡•Ç‡§Ü‡§à ‡§ü‡•á‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç",
    ui_test_result: "‡§¨‡§ü‡§® ‡§ï‡§æ ‡§∞‡§Ç‡§ó ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§¨‡§¶‡§≤ ‡§ó‡§Ø‡§æ!",

    edge_case_title: "‡§è‡§ú ‡§ï‡•á‡§∏ ‡§ü‡•á‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó",
    edge_case_desc: "‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§Ö‡§®‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§Ø‡§æ ‡§ö‡§∞‡§Æ ‡§á‡§®‡§™‡•Å‡§ü ‡§ï‡•ã ‡§ï‡•à‡§∏‡•á ‡§∏‡§Ç‡§≠‡§æ‡§≤‡§§‡§æ ‡§π‡•à‡•§ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§®‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§",
    edge_case_input_placeholder: "‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§®‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
    edge_case_test_button: "‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§®‡§æ‡§Æ ‡§ï‡§æ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç",

    detective_animation_title: "‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§ü‡§ø‡§µ ‡§ú‡§æ‡§∏‡•Ç‡§∏",
    detective_animation_desc: "‡§è‡§®‡§ø‡§Æ‡•á‡§ü‡•á‡§° ‡§è‡§∏‡§µ‡•Ä‡§ú‡•Ä ‡§°‡•á‡§Æ‡•ã",
    detective_animation_tip: "‡§ü‡§ø‡§™: ‡§Æ‡•à‡§ó‡•ç‡§®‡•Ä‡§´‡§æ‡§á‡§Ç‡§ó ‡§ó‡•ç‡§≤‡§æ‡§∏ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡•ã‡§° ‡§™‡§•‡•ã‡§Ç ‡§ï‡•ã ‡§Ö‡§≤‡§ó ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ï‡§≤‡•ç‡§™‡§®‡§æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§∞‡•á‡§Ç‡•§",

    previous: "‡§™‡§ø‡§õ‡§≤‡§æ",
    next: "‡§Ö‡§ó‡§≤‡§æ",
  }
};

const DebuggingTestingModule = () => {
  const [lang, setLang] = useState('en');
  const [testResults, setTestResults] = useState(null);
  const [uiTestResult, setUiTestResult] = useState('');
  const [edgeCaseResult, setEdgeCaseResult] = useState('');
  const [username, setUsername] = useState('');
  const [isButtonClicked, setIsButtonClicked] = useState(false);
  const navigate = useNavigate();
  const t = content[lang];

  useEffect(() => {
    const handleKeyDown = (event) => {
      if (event.ctrlKey && event.key === 'k') {
        event.preventDefault();
        setLang(prevLang => prevLang === 'en' ? 'hi' : 'en');
      }
    };
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, []);

  const runTests = () => {
    const results = {
      test1: 2 + 3 === 2 - 3, // This will be false
      test2: 10 + 5 === 10 - 5, // This will be false
    };
    setTestResults(results);
  };

  const testUi = () => {
    setIsButtonClicked(true);
    setTimeout(() => {
      setUiTestResult(t.ui_test_result);
    }, 500);
  };

  const testEdgeCase = () => {
    if (username.length < 3) {
      setEdgeCaseResult("Error: Username must be at least 3 characters long.");
    } else if (username.length > 15) {
      setEdgeCaseResult("Error: Username must be no more than 15 characters long.");
    } else if (!/^[a-zA-Z0-9_]+$/.test(username)) {
      setEdgeCaseResult("Error: Username can only contain letters, numbers, and underscores.");
    } else {
      setEdgeCaseResult("Success: Username is valid.");
    }
  };

  return (
    <div className="bg-gray-50 font-sans">
      <div className="p-4 sm:p-6 lg:p-8 min-h-screen">
        <div className="max-w-5xl mx-auto">
          <div className="flex items-center justify-between mb-8">
            <Link to="/parts/prt2" className="inline-flex items-center px-4 py-2 bg-white rounded-full shadow-md border border-gray-200 hover:bg-gray-100 transition">
              <FaHome className="mr-2 text-lg text-sky-600" />
              {t.home}
            </Link>
            <div className="flex space-x-2">
              <button onClick={() => setLang("en")} className={`px-3 py-1 rounded-lg border font-semibold ${lang === "en" ? "bg-sky-600 text-white border-sky-600" : "bg-white text-gray-700 border-gray-300"} transition`}>EN</button>
              <button onClick={() => setLang("hi")} className={`px-3 py-1 rounded-lg border font-semibold ${lang === "hi" ? "bg-sky-600 text-white border-sky-600" : "bg-white text-gray-700 border-gray-300"} transition`}>‡§π‡§ø‡§Ç</button>
            </div>
          </div>
          <div className="p-4 sm:p-6 lg:p-8 max-w-4xl mx-auto bg-white rounded-2xl shadow-lg">
            <motion.h1
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              className="text-3xl sm:text-4xl lg:text-5xl font-bold text-center text-gray-800 mb-2"
            >
              {t.title}
            </motion.h1>
            <p className="text-center text-gray-600 mb-8 text-base sm:text-lg">
              {t.subtitle}
            </p>

            {/* Testing Section */}
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2 }}
              className="bg-blue-50 p-6 rounded-lg shadow-inner mb-6"
            >
              <h2 className="text-xl sm:text-2xl font-semibold text-blue-800 mb-3">{t.testing_title}</h2>
              <p className="text-gray-700 mb-4" dangerouslySetInnerHTML={{ __html: t.testing_desc }} />
              <h3 className="text-lg font-semibold text-blue-700 mb-2">{t.testing_analogy_title}</h3>
              <p className="text-gray-700"><i>{t.testing_analogy}</i></p>
            </motion.div>

            {/* Debugging Section */}
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3 }}
              className="bg-red-50 p-6 rounded-lg shadow-inner mb-6"
            >
              <h2 className="text-xl sm:text-2xl font-semibold text-red-800 mb-3">{t.debugging_title}</h2>
              <p className="text-gray-700 mb-4" dangerouslySetInnerHTML={{ __html: t.debugging_desc }} />
              <h3 className="text-lg font-semibold text-red-700 mb-2">{t.debugging_analogy_title}</h3>
              <p className="text-gray-700"><i>{t.debugging_analogy}</i></p>
            </motion.div>

            {/* SVG Detective Animation */}
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.5 }}
              className="bg-sky-50 p-6 rounded-lg shadow-inner mb-6"
            >
              <h2 className="text-xl sm:text-2xl font-semibold text-sky-800 mb-3">{t.detective_animation_title}</h2>
              <p className="text-gray-700 mb-4">{t.detective_animation_desc}</p>
              <div className="w-full h-80 relative overflow-hidden rounded-lg bg-gray-800 border-4 border-gray-700 shadow-2xl">
                <svg viewBox="0 0 800 400" className="w-full h-full">
                  {/* Background */}
                  <rect width="800" height="400" fill="url(#night-sky)" />
                  <defs>
                    <radialGradient id="night-sky" cx="50%" cy="50%" r="50%">
                      <stop offset="0%" stopColor="#0d1a26" />
                      <stop offset="100%" stopColor="#000000" />
                    </radialGradient>
                  </defs>

                  {/* Detective */}
                  <motion.g
                    initial={{ x: 50, y: 200 }}
                    animate={{ x: [50, 700, 50], y: [200, 210, 200] }}
                    transition={{ duration: 25, repeat: Infinity, ease: "easeInOut" }}
                  >
                    {/* Hat */}
                    <path d="M 50 100 Q 75 80 100 100 L 110 105 L 40 105 Z" fill="#4a3b2a" />
                    {/* Body */}
                    <path d="M 60 105 L 90 105 L 85 150 L 65 150 Z" fill="#6b5b4a" />
                    {/* Magnifying Glass */}
                    <circle cx="120" cy="110" r="20" fill="none" stroke="#c0c0c0" strokeWidth="5" />
                    <line x1="135" y1="125" x2="150" y2="140" stroke="#c0c0c0" strokeWidth="5" />
                  </motion.g>

                  {/* Bugs */}
                  {[
                    { cx: 200, cy: 300, r: 10, color: "#f44336" },
                    { cx: 400, cy: 150, r: 8, color: "#ff9800" },
                    { cx: 600, cy: 250, r: 12, color: "#4caf50" },
                  ].map((bug, i) => (
                    <motion.g
                      key={i}
                      whileHover={{ scale: 1.5, rotate: 15 }}
                      className="cursor-pointer"
                    >
                      <motion.circle
                        cx={bug.cx}
                        cy={bug.cy}
                        r={bug.r}
                        fill={bug.color}
                        animate={{
                          cx: bug.cx + (Math.random() - 0.5) * 50,
                          cy: bug.cy + (Math.random() - 0.5) * 50,
                        }}
                        transition={{ duration: 3, repeat: Infinity, ease: "easeInOut" }}
                      />
                    </motion.g>
                  ))}
                  
                  {/* Footprints */}
                  <motion.g
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ delay: 2, duration: 2 }}
                  >
                    <path d="M 100 350 Q 110 360 120 350 T 140 350" fill="#ffffff" opacity="0.1" />
                    <path d="M 180 340 Q 190 350 200 340 T 220 340" fill="#ffffff" opacity="0.1" />
                    <path d="M 260 355 Q 270 365 280 355 T 300 355" fill="#ffffff" opacity="0.1" />
                  </motion.g>
                </svg>
              </div>
              <p className="text-xs text-slate-500 mt-2"><i>{t.detective_animation_tip}</i></p>
            </motion.div>

            {/* Testing Types Section */}
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.4 }}
              className="mb-6"
            >
              <h2 className="text-2xl sm:text-3xl font-bold text-center text-gray-800 mb-6">{t.testing_types_title}</h2>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {t.testing_types.map((type, index) => (
                  <div key={index} className="bg-gray-100 p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300">
                    <h3 className="font-bold text-xl text-gray-900 mb-2">{type.name}</h3>
                    <p className="text-base text-gray-700 mt-1">{type.description}</p>
                    <p className="text-sm text-gray-600 mt-4 p-2 bg-gray-200 rounded"><em><strong>Example:</strong> {type.example}</em></p>
                  </div>
                ))}
              </div>
            </motion.div>

            {/* Distinction Table */}
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.4 }}
              className="mb-6"
            >
              <h2 className="text-2xl sm:text-3xl font-bold text-center text-gray-800 mb-6">{t.distinction_title}</h2>
              <div className="overflow-x-auto rounded-lg shadow-md">
                <table className="w-full min-w-max divide-y divide-gray-200">
                  <thead className="bg-gray-200">
                    <tr>
                      <th className="px-6 py-3 text-left text-sm font-medium text-gray-600 uppercase tracking-wider">{t.distinction[0].aspect}</th>
                      <th className="px-6 py-3 text-left text-sm font-medium text-gray-600 uppercase tracking-wider">Testing</th>
                      <th className="px-6 py-3 text-left text-sm font-medium text-gray-600 uppercase tracking-wider">Debugging</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {t.distinction.map((item, index) => (
                      <tr key={index} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap font-medium text-gray-900">{item.aspect}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-gray-700">{item.testing}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-gray-700">{item.debugging}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </motion.div>

            {/* Interactive Simulations */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mt-10">
              {/* Spot the Bug */}
              <motion.div
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.6 }}
                className="bg-green-50 p-6 rounded-lg shadow-inner"
              >
                <h2 className="text-xl sm:text-2xl font-semibold text-green-800 mb-3">{t.interactive_title}</h2>
                <p className="text-gray-700 mb-4">{t.interactive_desc}</p>
                <div className="bg-gray-900 text-white p-4 rounded-lg mb-4 overflow-x-auto">
                  <pre><code>{t.code_snippet}</code></pre>
                </div>
                <button
                  onClick={runTests}
                  className="flex items-center gap-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg shadow transition"
                >
                  <FaPlay />
                  {t.run_tests_button}
                </button>
                {testResults && (
                  <div className="mt-4 space-y-2">
                    <h3 className="text-lg font-semibold text-gray-800">{t.test_results_title}</h3>
                    <div className={`flex items-center gap-2 p-3 rounded ${testResults.test1 ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                      {testResults.test1 ? <FaCheckCircle /> : <FaTimesCircle />}
                      <span>{t.test_case_1} - {testResults.test1 ? 'Passed' : 'Failed'}</span>
                    </div>
                    <div className={`flex items-center gap-2 p-3 mt-2 rounded ${testResults.test2 ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                      {testResults.test2 ? <FaCheckCircle /> : <FaTimesCircle />}
                      <span>{t.test_case_2} - {testResults.test2 ? 'Passed' : 'Failed'}</span>
                    </div>
                  </div>
                )}
              </motion.div>

              {/* UI & Edge Case Testing */}
              <div className="space-y-8">
                {/* UI Testing */}
                <motion.div
                  initial={{ opacity: 0, y: 30 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.7 }}
                  className="bg-yellow-50 p-6 rounded-lg shadow-inner"
                >
                  <h2 className="text-xl sm:text-2xl font-semibold text-yellow-800 mb-3">{t.ui_testing_title}</h2>
                  <p className="text-gray-700 mb-4">{t.ui_testing_desc}</p>
                  <button
                    onClick={testUi}
                    className={`px-4 py-2 rounded-lg shadow transition ${isButtonClicked ? 'bg-green-500' : 'bg-blue-500'} text-white`}
                  >
                    {t.ui_button_text}
                  </button>
                  {uiTestResult && (
                    <div className="mt-4 flex items-center gap-2 text-green-800">
                      <FaCheckCircle />
                      <span>{uiTestResult}</span>
                    </div>
                  )}
                </motion.div>

                {/* Edge Case Testing */}
                <motion.div
                  initial={{ opacity: 0, y: 30 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.8 }}
                  className="bg-purple-50 p-6 rounded-lg shadow-inner"
                >
                  <h2 className="text-xl sm:text-2xl font-semibold text-purple-800 mb-3">{t.edge_case_title}</h2>
                  <p className="text-gray-700 mb-4">{t.edge_case_desc}</p>
                  <div className="flex flex-col sm:flex-row items-center gap-2">
                    <input
                      type="text"
                      value={username}
                      onChange={(e) => setUsername(e.target.value)}
                      placeholder={t.edge_case_input_placeholder}
                      className="border border-gray-300 p-2 rounded-lg w-full"
                    />
                    <button
                      onClick={testEdgeCase}
                      className="flex items-center gap-2 px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg shadow transition w-full sm:w-auto"
                    >
                      <FaPlay />
                      {t.edge_case_test_button}
                    </button>
                  </div>
                  {edgeCaseResult && (
                    <div className={`mt-4 flex items-center gap-2 p-3 rounded ${edgeCaseResult.startsWith('Success') ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                      {edgeCaseResult.startsWith('Success') ? <FaCheckCircle /> : <FaTimesCircle />}
                      <span>{edgeCaseResult}</span>
                    </div>
                  )}
                </motion.div>
              </div>
            </div>

          </div>

          <div className="w-full flex justify-between items-center mt-10 p-4 bg-gray-100 rounded-lg shadow-md">
            <button
              onClick={() => navigate('/module4/version-control')}
              className="flex items-center gap-2 px-4 py-2 bg-purple-200 hover:bg-purple-300 text-purple-900 rounded-lg shadow transition"
            >
              <FaArrowLeft />
              {t.previous}
            </button>
            <button
              onClick={() => navigate('/module4/security')}
              className="flex items-center gap-2 px-4 py-2 bg-green-200 hover:bg-green-300 text-green-900 rounded-lg shadow transition"
            >
              {t.next}
              <FaArrowRight />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DebuggingTestingModule;